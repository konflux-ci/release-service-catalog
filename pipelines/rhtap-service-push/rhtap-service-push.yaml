---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: rhtap-service-push
  labels:
    app.kubernetes.io/version: "0.7.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton pipeline to release HACBS Snapshot to Quay
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releaseplan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releaseplanadmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractPublicKey
      type: string
      description: Public key to use for validation by the enterprise contract
      default: k8s://openshift-pipelines/public-key
    - name: extraConfigGitUrl
      type: string
      description: URL to the remote Git repository containing the extra config
      default: ""
    - name: extraConfigGitRevision
      type: string
      description: Revision to fetch from the remote Git repository containing the extra config
      default: ""
    - name: extraConfigPath
      type: string
      description: Path to the extra config file within the repository
      default: ""
    - name: tag
      type: string
      description: The default tag to use when mapping file does not contain a tag
    - name: addGitShaTag
      type: string
      description: When pushing the snapshot components, also push a tag with the image git sha
      default: "true"
    - name: addSourceShaTag
      type: string
      description: When pushing the snapshot components, also push a tag with the image source sha
      default: "true"
    - name: addTimestampTag
      type: string
      description: When pushing the snapshot components, also push a tag with the current timestamp
      default: "false"
    - name: pyxisServerType
      type: string
      description: The Pyxis server type to use. Options are 'production' and 'stage'
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: verify_ec_task_git_url
      type: string
      description: The git repo url of the verify-enterprise-contract task
    - name: verify_ec_task_git_revision
      type: string
      description: The git repo revision the verify-enterprise-contract task
    - name: verify_ec_task_git_pathInRepo
      type: string
      description: The location of the verify-enterprise-contract task in its repo
  workspaces:
    - name: release-workspace
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: hub/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            ORIGIN_NAMESPACE=$(echo $(params.release) | cut -f1 -d/)
            TARGET_NAMESPACE=$(echo $(params.releaseplanadmission) | cut -f1 -d/)

            RELEASE_NAME=$(echo $(params.release) | cut -f2 -d/)
            RELEASEPLAN_NAME=$(echo $(params.releaseplan) | cut -f2 -d/)
            RELEASEPLANADMISSION_NAME=$(echo $(params.releaseplanadmission) | cut -f2 -d/)
            SNAPSHOT_NAME=$(echo $(params.snapshot) | cut -f2 -d/)

            CAN_I_READ_RELEASES=$(kubectl auth can-i get release/${RELEASE_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_READ_RELEASEPLANS=$(kubectl auth can-i get releaseplan/${RELEASEPLAN_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_READ_RELEASEPLANADMISSIONS=$(kubectl auth can-i get releaseplanadmission/${RELEASEPLANADMISSION_NAME}\
                -n ${TARGET_NAMESPACE})
            CAN_I_READ_SNAPSHOTS=$(kubectl auth can-i get snapshot/${SNAPSHOT_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_CREATE_INTERNALREQUESTS=$(kubectl auth can-i create internalrequest -n ${TARGET_NAMESPACE})

            echo ""
            echo "CAN_I_READ_RELEASES? ${CAN_I_READ_RELEASES}"
            echo "CAN_I_READ_RELEASEPLANS? ${CAN_I_READ_RELEASEPLANS}"
            echo "CAN_I_READ_RELEASEPLANADMISSIONS? ${CAN_I_READ_RELEASEPLANADMISSIONS}"
            echo "CAN_I_READ_SNAPSHOTS? ${CAN_I_READ_SNAPSHOTS}"
            echo ""
            echo "CAN_I_CREATE_INTERNALREQUESTS? ${CAN_I_CREATE_INTERNALREQUESTS}"
            echo ""

            if [ "${CAN_I_READ_RELEASES}" == "no" ] ||\
                [ "${CAN_I_READ_RELEASEPLANS}" == "no" ] ||\
                [ "${CAN_I_READ_RELEASEPLANADMISSIONS}" == "no" ] ||\
                [ "${CAN_I_READ_SNAPSHOTS}" == "no" ] ||\
                [ "${CAN_I_CREATE_INTERNALREQUESTS}" == "no" ] ; then
              echo "Error: Cannot read or create required Release resources!"
              echo ""
              echo "This indicates that your workspace is not correctly setup"
              echo "Please reach out to a workspace administrator"
              exit 1
            fi

            echo "Access to Release resources verified"
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releaseplan
          value: $(params.releaseplan)
        - name: releaseplanadmission
          value: $(params.releaseplanadmission)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: clone-config-file
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/build-definitions.git
          - name: revision
            value: dedce1f59906394ea777606683eec9eb2de465ac
          - name: pathInRepo
            value: task/git-clone/0.1/git-clone.yaml
      when:
        - input: $(params.extraConfigGitUrl)
          operator: notin
          values: [""]
      params:
        - name: url
          value: $(params.extraConfigGitUrl)
        - name: revision
          value: $(params.extraConfigGitRevision)
        - name: subdirectory
          value: "$(context.pipelineRun.uid)/extraConfig"
      workspaces:
        - name: output
          workspace: release-workspace
    - name: apply-mapping
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/apply-mapping/apply-mapping.yaml
      params:
        - name: extraConfigPath
          value: "$(context.pipelineRun.uid)/extraConfig/$(params.extraConfigPath)"
        - name: failOnEmptyResult
          value: "true"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      when:
        - input: $(tasks.clone-config-file.results.commit)
          operator: notin
          values: [""]
      workspaces:
        - name: config
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: verify-enterprise-contract
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.verify_ec_task_git_url)
          - name: revision
            value: $(params.verify_ec_task_git_revision)
          - name: pathInRepo
            value: $(params.verify_ec_task_git_pathInRepo)
      params:
        - name: IMAGES
          value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          value: "1"
        - name: IGNORE_REKOR
          value: "true"
        - name: PUBLIC_KEY
          value: $(params.enterpriseContractPublicKey)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - apply-mapping
    - name: push-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/push-snapshot/push-snapshot.yaml
      params:
        - name: tag
          value: $(params.tag)
        - name: addGitShaTag
          value: $(params.addGitShaTag)
        - name: addSourceShaTag
          value: $(params.addSourceShaTag)
        - name: addTimestampTag
          value: $(params.addTimestampTag)
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-enterprise-contract
    - name: create-pyxis-image
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/create-pyxis-image/create-pyxis-image.yaml
      params:
        - name: server
          value: $(params.pyxisServerType)
        - name: pyxisSecret
          value: $(params.pyxisSecret)
        - name: tag
          value: $(params.tag)
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-snapshot
    - name: push-sbom-to-pyxis
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/push-sbom-to-pyxis/push-sbom-to-pyxis.yaml
      params:
        - name: containerImageIDs
          value: $(tasks.create-pyxis-image.results.containerImageIDs)
        - name: server
          value: $(params.pyxisServerType)
        - name: pyxisSecret
          value: $(params.pyxisSecret)
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      workspaces:
        - name: data
          workspace: release-workspace
    - name: infra-deployments-pr
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/update-infra-deployments/update-infra-deployments.yaml
      params:
        - name: gitImage
          value: >-
            quay.io/hacbs-release/release-utils@sha256:5733ece907aa70d6ebced36484c936731e8b27bfcf87fed226a0ecf95047a6b8
        - name: snapshotPath
          value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: extraDataJsonPath
          value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/extra_data.json"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-sbom-to-pyxis
  finally:
    - name: slack-webhook-notification
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/slack-webhook-notification/slack-webhook-notification.yaml
      params:
        - name: message
          value: Release pipelineRun $(context.pipelineRun.name) $(tasks.status)
        - name: extraDataJsonPath
          value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/extra_data.json"
      workspaces:
        - name: data
          workspace: release-workspace
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/redhat-appstudio/release-service-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      workspaces:
        - name: input
          workspace: release-workspace
