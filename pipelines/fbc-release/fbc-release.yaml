---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: fbc-release
  labels:
    app.kubernetes.io/version: "1.6.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton release pipeline to interact with FBC Pipeline
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releaseplan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releaseplanadmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractPublicKey
      type: string
      description: Public key to use for validation by the enterprise contract
      default: k8s://openshift-pipelines/public-key
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-enterprise-contract task
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/redhat-appstudio/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: development
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
  workspaces:
    - name: release-workspace
  results:
    - name: requestMessage
      type: string
      value: $(tasks.add-fbc-contribution-to-index-image.results.requestMessage)
    - name: requestReason
      type: string
      value: $(tasks.add-fbc-contribution-to-index-image.results.requestReason)
    - name: iibIndexImage
      type: string
      value: $(tasks.extract-index-image.results.indexImage)
    - name: iibIndexImageResolved
      type: string
      value: $(tasks.extract-index-image.results.indexImageResolved)
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: hub/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            ORIGIN_NAMESPACE=$(echo $(params.release) | cut -f1 -d/)
            TARGET_NAMESPACE=$(echo $(params.releaseplanadmission) | cut -f1 -d/)

            RELEASE_NAME=$(echo $(params.release) | cut -f2 -d/)
            RELEASEPLAN_NAME=$(echo $(params.releaseplan) | cut -f2 -d/)
            RELEASEPLANADMISSION_NAME=$(echo $(params.releaseplanadmission) | cut -f2 -d/)
            SNAPSHOT_NAME=$(echo $(params.snapshot) | cut -f2 -d/)

            CAN_I_READ_RELEASES=$(kubectl auth can-i get release/${RELEASE_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_READ_RELEASEPLANS=$(kubectl auth can-i get releaseplan/${RELEASEPLAN_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_READ_RELEASEPLANADMISSIONS=$(kubectl auth can-i get releaseplanadmission/${RELEASEPLANADMISSION_NAME}\
                -n ${TARGET_NAMESPACE})
            CAN_I_READ_SNAPSHOTS=$(kubectl auth can-i get snapshot/${SNAPSHOT_NAME} -n ${ORIGIN_NAMESPACE})
            CAN_I_CREATE_INTERNALREQUESTS=$(kubectl auth can-i create internalrequest -n ${TARGET_NAMESPACE})

            echo ""
            echo "CAN_I_READ_RELEASES? ${CAN_I_READ_RELEASES}"
            echo "CAN_I_READ_RELEASEPLANS? ${CAN_I_READ_RELEASEPLANS}"
            echo "CAN_I_READ_RELEASEPLANADMISSIONS? ${CAN_I_READ_RELEASEPLANADMISSIONS}"
            echo "CAN_I_READ_SNAPSHOTS? ${CAN_I_READ_SNAPSHOTS}"
            echo ""
            echo "CAN_I_CREATE_INTERNALREQUESTS? ${CAN_I_CREATE_INTERNALREQUESTS}"
            echo ""

            if [ "${CAN_I_READ_RELEASES}" == "no" ] ||\
                [ "${CAN_I_READ_RELEASEPLANS}" == "no" ] ||\
                [ "${CAN_I_READ_RELEASEPLANADMISSIONS}" == "no" ] ||\
                [ "${CAN_I_READ_SNAPSHOTS}" == "no" ] ||\
                [ "${CAN_I_CREATE_INTERNALREQUESTS}" == "no" ] ; then
              echo "Error: Cannot read or create required Release resources!"
              echo ""
              echo "This indicates that your workspace is not correctly setup"
              echo "Please reach out to a workspace administrator"
              exit 1
            fi

            echo "Access to Release resources verified"
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releaseplan
          value: $(params.releaseplan)
        - name: releaseplanadmission
          value: $(params.releaseplanadmission)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: validate-single-component
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/validate-single-component/validate-single-component.yaml
      params:
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: verify-enterprise-contract
      taskRef:
        resolver: "bundles"
        params:
          - name: bundle
            value: $(params.verify_ec_task_bundle)
          - name: kind
            value: task
          - name: name
            value: verify-enterprise-contract
      params:
        - name: IMAGES
          value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          value: "1"
        - name: IGNORE_REKOR
          value: "true"
        - name: PUBLIC_KEY
          value: $(params.enterpriseContractPublicKey)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - validate-single-component
    - name: get-ocp-version
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/get-ocp-version/get-ocp-version.yaml
      params:
        - name: fbcFragment
          value: "$(tasks.collect-data.results.fbcFragment)"
      runAfter:
        - verify-enterprise-contract
    - name: update-ocp-tag
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/update-ocp-tag/update-ocp-tag.yaml
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: ocpVersion
          value: "$(tasks.get-ocp-version.results.stored-version)"
    - name: add-fbc-contribution-to-index-image
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/add-fbc-contribution/add-fbc-contribution.yaml
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: binaryImage
          value: "$(tasks.update-ocp-tag.results.updated-binaryImage)"
        - name: fromIndex
          value: "$(tasks.update-ocp-tag.results.updated-fromIndex)"
      runAfter:
        - verify-enterprise-contract
    - name: extract-requester-from-release
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: hub/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            set -x

            NAMESPACE=$(echo $(params.release) | cut -d '/' -f 1)
            NAME=$(echo $(params.release) | cut -d '/' -f 2)

            AUTHOR=$(kubectl get release ${NAME} -n ${NAMESPACE} \
            -o=jsonpath='{.status.attribution.author}' | tee $(results.output-result.path))

            if [[ ${AUTHOR} == "" ]] ; then exit 1 ; fi
      runAfter:
        - verify-access-to-resources
    - name: sign-index-image
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/sign-index-image/sign-index-image.yaml
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: referenceImage
          value: $(tasks.add-fbc-contribution-to-index-image.results.requestTargetIndex)
        - name: manifestDigestImage
          value: $(tasks.extract-index-image.results.indexImageResolved)
        - name: requester
          value: $(tasks.extract-requester-from-release.results.output-result)
      when:
        - input: "$(tasks.add-fbc-contribution-to-index-image.results.mustSignIndexImage)"
          operator: in
          values: ["true"]
    - name: extract-index-image
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/extract-index-image/extract-index-image.yaml
      params:
        - name: inputDataFile
          value: $(tasks.add-fbc-contribution-to-index-image.results.requestResultsFile)
    - name: publish-index-image
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/publish-index-image/publish-index-image.yaml
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: sourceIndex
          value: $(tasks.extract-index-image.results.indexImageResolved)
        - name: targetIndex
          value: $(tasks.add-fbc-contribution-to-index-image.results.requestTargetIndex)
        - name: buildTimestamp
          value: $(tasks.add-fbc-contribution-to-index-image.results.buildTimestamp)
        - name: retries
          value: "3"
      when:
        - input: $(tasks.add-fbc-contribution-to-index-image.results.mustPublishIndexImage)
          operator: in
          values: ["true"]
      runAfter:
        - sign-index-image
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      workspaces:
        - name: input
          workspace: release-workspace
