---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: rh-advisories
  labels:
    app.kubernetes.io/version: "0.13.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton pipeline to release content to registry.redhat.io and create an advisory
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releasePlanAdmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: releaseServiceConfig
      type: string
      description: The namespaced name (namespace/name) of the releaseServiceConfig
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractPublicKey
      type: string
      description: Public key to use for validation by the enterprise contract
      default: k8s://openshift-pipelines/public-key
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: enterpriseContractTimeout
      type: string
      description: Timeout setting for `ec validate`
      default: 10m0s
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-enterprise-contract task
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: release-workspace
  results:
    - name: advisory_url
      type: string
      value: $(tasks.create-advisory.results.advisory_url)
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: extract-requester-from-release
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: hub/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            set -x

            NAMESPACE=$(echo $(params.release) | cut -d '/' -f 1)
            NAME=$(echo $(params.release) | cut -d '/' -f 2)

            AUTHOR=$(kubectl get release ${NAME} -n ${NAMESPACE} \
            -o=jsonpath='{.status.attribution.author}' | tee $(results.output-result.path))

            if [[ ${AUTHOR} == "" ]] ; then exit 1 ; fi
      runAfter:
        - verify-access-to-resources
    - name: apply-mapping
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/apply-mapping/apply-mapping.yaml
      params:
        - name: failOnEmptyResult
          value: "true"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: config
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: verify-enterprise-contract
      taskRef:
        resolver: "bundles"
        params:
          - name: bundle
            value: $(params.verify_ec_task_bundle)
          - name: kind
            value: task
          - name: name
            value: verify-enterprise-contract
      params:
        - name: IMAGES
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          value: "1"
        - name: IGNORE_REKOR
          value: "true"
        - name: PUBLIC_KEY
          value: $(params.enterpriseContractPublicKey)
        - name: EXTRA_RULE_DATA
          value: $(params.enterpriseContractExtraRuleData)
        - name: TIMEOUT
          value: $(params.enterpriseContractTimeout)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - apply-mapping
    - name: populate-release-notes-images
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/populate-release-notes-images/populate-release-notes-images.yaml
        resolver: git
      runAfter:
        - apply-mapping
      workspaces:
        - name: data
          workspace: release-workspace
    - name: embargo-check
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/embargo-check/embargo-check.yaml
        resolver: git
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - populate-release-notes-images
    - name: collect-cosign-params
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-cosign-params/collect-cosign-params.yaml
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: rh-sign-image-cosign
      when:
        - input: $(tasks.collect-cosign-params.results.cosign-secret-name)
          operator: notin
          values: [""]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/rh-sign-image-cosign/rh-sign-image-cosign.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: secretName
          value: "$(tasks.collect-cosign-params.results.cosign-secret-name)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-snapshot
    - name: push-snapshot
      when:
        - input: "$(tasks.apply-mapping.results.mapped)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/push-snapshot/push-snapshot.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - rh-sign-image
    - name: collect-pyxis-params
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-pyxis-params/collect-pyxis-params.yaml
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: rh-sign-image
      timeout: "2h00m0s"
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/rh-sign-image/rh-sign-image.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: requester
          value: $(tasks.extract-requester-from-release.results.output-result)
        - name: requestTimeout
          # The RADAS timeout when it fails to receive a response is 5 mins.
          # We double the requestTimeout to allow RADAS to retry its request.
          value: 600
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - embargo-check
    - name: create-pyxis-image
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/create-pyxis-image/create-pyxis-image.yaml
      params:
        - name: server
          value: $(tasks.collect-pyxis-params.results.server)
        - name: pyxisSecret
          value: $(tasks.collect-pyxis-params.results.secret)
        - name: rhPush
          value: "true"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-snapshot
    - name: publish-pyxis-repository
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/publish-pyxis-repository/publish-pyxis-repository.yaml
      params:
        - name: server
          value: $(tasks.collect-pyxis-params.results.server)
        - name: pyxisSecret
          value: $(tasks.collect-pyxis-params.results.secret)
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-rpm-manifests-to-pyxis
    - name: push-rpm-manifests-to-pyxis
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/push-rpm-manifests-to-pyxis/push-rpm-manifests-to-pyxis.yaml
      params:
        - name: pyxisJsonPath
          value: $(tasks.create-pyxis-image.results.pyxisDataPath)
        - name: server
          value: $(tasks.collect-pyxis-params.results.server)
        - name: pyxisSecret
          value: $(tasks.collect-pyxis-params.results.secret)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - create-pyxis-image
    - name: run-file-updates
      params:
        - name: fileUpdatesPath
          value: $(tasks.collect-data.results.data)
        - name: jsonKey
          value: ".fileUpdates"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      runAfter:
        - push-rpm-manifests-to-pyxis
      taskRef:
        kind: Task
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/run-file-updates/run-file-updates.yaml
        resolver: git
      workspaces:
        - name: data
          workspace: release-workspace
    - name: check-data-keys
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: systems
          value:
            - releaseNotes
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/check-data-keys/check-data-keys.yaml
        resolver: git
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - populate-release-notes-images
    - name: create-advisory
      params:
        - name: releasePlanAdmissionPath
          value: "$(tasks.collect-data.results.releasePlanAdmission)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/create-advisory/create-advisory.yaml
        resolver: git
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - check-data-keys
        - embargo-check
        - publish-pyxis-repository
    - name: update-cr-status
      params:
        - name: resource
          value: $(params.release)
        - name: resultsDirPath
          value: $(tasks.collect-data.results.resultsDir)
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/update-cr-status/update-cr-status.yaml
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - create-advisory
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: input
          workspace: release-workspace
