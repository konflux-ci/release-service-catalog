---
name: Tekton Bundle Push
on:  # yamllint disable-line rule:truthy
  push:
    branches: ['main']
  workflow_dispatch:
env:
  IMAGE_REGISTRY: quay.io
  IMAGE_NAMESPACE: ${{ secrets.QUAY_NAMESPACE }}
  REGISTRY_USER: ${{ secrets.QUAY_ROBOT_USER }}
  REGISTRY_PASSWORD: ${{ secrets.QUAY_ROBOT_TOKEN }}
  API_TOKEN: ${{ secrets.QUAY_API_TOKEN }}
jobs:
  run-pipeline:
    name: Tekton Bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2  # using git diff-tree requires fetch depth=2
      - run: |
          mkdir -vp $HOME/.kube || true
          cat <<-EOF > $HOME/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: _
            name: _
          contexts:
          - context:
              cluster: _
            name: _
          current-context: _
          EOF
      - uses: jerop/tkn@v0.1.0
      - uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - run: |
          declare -A bundle_dirs
          while read file
          do
            [[ ${file%%/*} = \.* ]] && continue
            bundle_dirs["${file%%/*}"]+="${file##*/} "
          done < <(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          for BUNDLE_NAME in "${!bundle_dirs[@]}"
          do
            BUNDLE_FILES=()
            for file in $BUNDLE_NAME/*.yaml
            do
              [[ -e "$file" ]] || continue
              BUNDLE_FILES+=("$file")
            done
            printf -v bundle_files -- '-f %s ' ${BUNDLE_FILES[*]}
            printf -v image_string '%s/%s/%s' \
              ${{ env.IMAGE_REGISTRY }} \
              ${{ env.IMAGE_NAMESPACE }} \
              "${BUNDLE_NAME}"

            API_HTTP="https://${{ env.IMAGE_REGISTRY }}/api/v1"

            mapfile -t repos < <(
              curl \
                --silent \
                --request GET "${API_HTTP}/repository?namespace=${{ env.IMAGE_NAMESPACE }}" \
                --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' | \
              jq '.repositories[].name'
            )
            if ! grep "${BUNDLE_NAME}" <<<${repos[*]}
            then
              # Need to create the repo
              printf -v repo_string -- \
                '{"namespace": "%s", "repository": "%s", "description": "%s", "visibility": "%s", "repo_kind": "%s"}' \
                ${{ env.IMAGE_NAMESPACE }} \
                ${BUNDLE_NAME} \
                ${BUNDLE_NAME} \
                public \
                image
              curl \
                --silent \
                --request POST "${API_HTTP}/repository?namespace=${{ env.IMAGE_NAMESPACE }}" \
                --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
                --header 'Content-Type: application/json' \
                --data "$repo_string"
            fi

            tkn bundle push ${bundle_files} "${image_string}:${GITHUB_SHA:0:8}"
            tkn bundle push ${bundle_files} "${image_string}:latest"

          done
