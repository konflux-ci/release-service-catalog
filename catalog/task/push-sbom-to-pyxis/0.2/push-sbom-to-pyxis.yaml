---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: push-sbom-to-pyxis
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that extracts sboms from pull specs and pushes them to Pyxis.
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in hte data workspace
      type: string
      default: mapped_snapshot.json
    - name: containerImageIDs
      description: Space separated list of Pyxis image IDs
      type: string
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: server
      type: string
      description: The server type to use. Options are 'production' and 'stage'
      default: production
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  volumes:
    - name: workdir
      emptyDir: {}
  steps:
    - name: download-sbom-files
      image:
        quay.io/hacbs-release/release-utils:de40e7e7b9d90de5cff5a4266d429f633bd1a1c2
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env sh
        set -eux

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        IMAGEURLS=($(cat "${SNAPSHOT_SPEC_FILE}" | jq -r '.components[].containerImage'))
        IMAGEIDS=($(params.containerImageIDs))

        if [ ${#IMAGEURLS[@]} != ${#IMAGEIDS[@]} ]; then
          echo "ERROR: Lengths of imageURLs and containerImageIDs do not match"
          exit 1
        fi

        mkdir /workdir/sboms
        cd /workdir/sboms

        for i in ${!IMAGEURLS[@]}; do
          echo "Fetching sbom for image: ${IMAGEURLS[$i]}"
          cosign download sbom --output-file "${IMAGEIDS[$i]}.json" "${IMAGEURLS[$i]}"
        done

    - name: push-sbom-files-to-pyxis
      image:
        quay.io/hacbs-release/release-utils:de40e7e7b9d90de5cff5a4266d429f633bd1a1c2
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env sh
        set -eu

        if [[ "$(params.server)" == "production" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.api.redhat.com/graphql/"
        elif [[ "$(params.server)" == "stage" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.preprod.api.redhat.com/graphql/"
        else
          echo "Invalid server parameter. Only 'production' and 'stage' are allowed."
          exit 1
        fi

        export PYXIS_CERT_PATH=/workdir/crt
        export PYXIS_KEY_PATH=/workdir/key
        echo "${pyxisCert}" > $PYXIS_CERT_PATH
        echo "${pyxisKey}" > $PYXIS_KEY_PATH

        cd /workdir/sboms

        for FILE in *.json; do
          echo Uploading sbom to Pyxis: $FILE
          upload_sbom --sbom-path $FILE
        done
