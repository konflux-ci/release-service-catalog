---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: push-snapshot
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push snapshot images to an image registry using `skopeo copy`
  params:
    - name: mappedSnapshot
      description: JSON string representing the Snapshot
      type: string
    - name: tag
      description: Default tag to use if mapping entry does not contain a tag
      type: string
      default: "latest"
    - name: retries
      description: Retry copy N times.
      type: string
      default: "0"
    - name: addShaTag
      description: Also push a tag with the sha for each image in the Snapshot
      type: string
      default: "true"
    - name: addTimestampTag
      description: Also push a tag with the current timestamp for each image in the Snapshot
      type: string
      default: "false"
  steps:
    - name: push-snapshot
      image:
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      script: |
        #!/usr/bin/env bash
        set -eux

        push_image () { # Expected arguments are [name, containerImage, repository, tag] from data array
          printf '* Pushing component: %s to %s:%s\n' "$1" "$3" "$4"
          skopeo copy \
            --all \
            --preserve-digests \
            --dest-precompute-digests \
            --retry-times="$(params.retries)" \
            "docker://$2" \
            "docker://$3:$4"
        }

        application=$(jq -r '.application' <<<'$(params.mappedSnapshot)')
        printf 'Beginning "%s" for "%s"\n\n' "$(context.task.name)" "$application"
        while read line;
        do
          # Create array with component values
          typeset -A data
          while IFS== read -r key value; do
            data["$key"]="$value"
          done < <(jq -r '. | to_entries | .[] | .key + "=" + .value' <<<"$line")
          # take tag if present in mapping file, otherwise take ReleaseStrategy default
          data[tag]="${data[tag]:=$(params.tag)}"
          typeset -p data

          source_digest=$(skopeo inspect \
            --format '{{.Digest}}' \
            "docker://${data[containerImage]}" 2>/dev/null)
          # note: Inspection might fail on empty repos, hence `|| true`
          destination_digest=$(
            skopeo inspect \
            --format '{{.Digest}}' \
            "docker://${data[repository]}:${data[tag]}" 2>/dev/null || true)
          if [[ "$destination_digest" != "$source_digest" || -z "$destination_digest" ]]
          then
            push_image "${data[name]}" "${data[containerImage]}" "${data[repository]}" "${data[tag]}"
            if [ $(params.addTimestampTag) = true ] ; then
              timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ" | sed 's/:/-/g')
              push_image "${data[name]}" "${data[containerImage]}" "${data[repository]}" "$timestamp"
            fi
            if [ $(params.addShaTag) = true ] ; then
              if [[ "${data[containerImage]}" == *"@sha256"* && \
                $(echo "${data[containerImage]}" | tr -cd ':' | wc -c) -eq 1 ]]
              then
                sha=$(echo "${data[containerImage]}" | cut -d ':' -f 2)
                push_image "${data[name]}" "${data[containerImage]}" "${data[repository]}" "$sha"
              else
                printf 'Asked to create sha based tag, but no sha found in %s\n' "${data[containerImage]}"
                exit 1
              fi
            fi
          else
            printf '* Component push skipped (source digest exists at destination): %s (%s)\n' \
              "${data[name]}" "$source_digest"
          fi
        done < <(jq -rc '.components[]' <<<'$(params.mappedSnapshot)')
        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$application"
