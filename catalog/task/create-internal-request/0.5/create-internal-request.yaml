---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-internal-request
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
      Creates an InternalRequest resource to call IIB service
  params:
    - name: pipelineRunName
      type: string
      description: The name of the Parent PipelineRun of this task
    - name: request
      type: string
      description: request type
    - name: params
      type: string
      description: Internal Request parameters
    - name: inputDataFile
      type: string
      description: Optional file to read data from
      default: ""
    - name: requestUpdateTimeout
      type: string
      default: "360"
      description: Max seconds waiting for the status update
  results:
    - name: requestMessage
      description: Internal Request message
    - name: requestReason
      description: Internal Request reason
    - name: requestResultsFile
      description: Internal Request results file
  workspaces:
    - name: input
      description: Workspace to store the params and responses for the internalRequest
  steps:
    - name: prepare-internal-request
      image:
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      script: |
          #!/usr/bin/env bash
          #
          set -e
          # Tekton wraps the $(param.params) in a JSON string that in some usecases might contain another JSON string
          # that breaks jq parsing, so we need to sanitize it before parsing it. Currently it supports only single
          # nested JSON string.

          # sanitize
          #
          # param string `file`
          sanitize() {
            TEMP="${1}-tmp"
            # UNESCAPED=$(grep -Po  "(?<=.sanitize.)(.*)+(?=./sanitize.)" ${1})
            SANITIZED_JSON=$(awk -e '{match($0, /"{.*}"/, m); {start=index($0, m[0])+1; end=length(m[0])-2} print substr($0, start, end) }' ${1} | jq -Rc "." | sed 's|\\|\\\\|g')
            awk -v sanitized=${SANITIZED_JSON} -e '{gsub(/"{.*}"/, sanitized); gsub("\\\\","\\\\\\"); print}' ${1} > ${TEMP}
            if jq "." ${TEMP} >/dev/null; then
              mv ${TEMP} ${1}
            else
                return 1
            fi
          }

          # saving the parameters preserving the string as is
          JSON_PARAMS="/tmp/json-params-$$.txt"
          cat > ${JSON_PARAMS} <<JSON
          $(params.params)
          JSON

          # sanitizing the string
          sanitize ${JSON_PARAMS}

          # building the InternalRequest yaml
          #
          IR="$(workspaces.input.path)/ir-$(params.pipelineRunName)-$(context.taskRun.uid).yaml"
          cat > ${IR} <<YAML
          apiVersion: appstudio.redhat.com/v1alpha1
          kind: InternalRequest
          metadata:
            name: "ir-$(params.pipelineRunName)-$(params.request)"
          spec:
            request: "$(params.request)"
            params:
          YAML

          LENGTH=`jq ". | length" ${JSON_PARAMS}`
          for (( i=0; i<${LENGTH}; i++ )); do
            INPUT=$(jq -r ".[${i}]|[.name, .value]| @tsv" ${JSON_PARAMS})
            read -r PARAM VALUE <<< "${INPUT}"
            if [ `jq -e ".[${i}]| has(\"jsonKey\")" ${JSON_PARAMS}` == "true" ]; then
                JSON_KEY=`jq -r ".[${i}]|[.jsonKey]| @tsv" ${JSON_PARAMS}`
                # check if the request needs the sharedRequestFile;
                # otherwise the source is a json string
                IFS=":" read -r SOURCE TYPE KEY  <<< $VALUE
                if [ "${SOURCE}" == "sharedRequestFile" ]; then
                    case ${TYPE} in
                        "json")
                            # it has a nested json string
                            VALUE=`jq -cr "${KEY}" $(params.inputDataFile) \
                            | jq -cr "${JSON_KEY}"`
                        ;;
                    esac
                else
                    VALUE=$(echo "${VALUE}" |tr -d "\\" 2>/dev/null |tr -d "\'" |jq -cr "${JSON_KEY}")
                fi
            fi
            echo "    ${PARAM}: \"${VALUE}\"" >> ${IR}
          done
    - name: create-internal-request
      image: 
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      script: |
          #!/usr/bin/env sh
          PATH=/bin:/usr/bin:/usr/local/bin
          export PATH

          IR="$(workspaces.input.path)/ir-$(params.pipelineRunName)-$(context.taskRun.uid).yaml"
          kubectl create -f ${IR}
    - name: watch-internal-request-status
      image:
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      script: |
          #!/usr/bin/env sh
          PATH=/bin:/usr/bin:/usr/local/bin
          TASKRUN="/tmp/$$.sh"

          cat > ${TASKRUN} <<SH
          #!/usr/bin/env sh
          #
          # the task might need to get input from a shared file
          RESULTSFILE="$(workspaces.input.path)/$(params.pipelineRunName)-$(context.taskRun.uid)-results.txt"
          echo -n \${RESULTSFILE} |tee $(results.requestResultsFile.path)

          IR="ir-$(params.pipelineRunName)-$(params.request)"
          while true; do
            STATUS=\$(kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].status}')
            case "\${STATUS}" in
              True | False )
                echo "InternalRequest finished"
                kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].reason}' \
                | tee $(results.requestReason.path)
                kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].message}' \
                | tee $(results.requestMessage.path)
                kubectl get internalrequest \${IR} -o jsonpath='{.status.results}' \
                | tee \${RESULTSFILE}
                break
                ;;
              "*")
                ;;
            esac
            sleep 30
          done
          [ \$(kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].status}') == "True" ]
          SH
          chmod +x ${TASKRUN}
          timeout $(params.requestUpdateTimeout) ${TASKRUN}
          SYSEXIT=$?
          [ ${SYSEXIT} -eq 124 ] && echo "Timeout while waiting for the internal request update"
          exit ${SYSEXIT}
