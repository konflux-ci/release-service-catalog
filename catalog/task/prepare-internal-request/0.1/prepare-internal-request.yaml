---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: prepare-internal-request
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Prepares the InternalRequest yaml required by the create-internal-request task
  params:
    - name: pipelineRunName
      type: string
      description: The name of the Parent PipelineRun of this task
    - name: request
      type: string
      description: InternalRequest Pipeline name
    - name: params
      value: InternalRequest params
  workspaces:
    - name: common
      description: Workspace to store the params and responses for the internalRequest
  steps:
    - name: prepare-internal-request
      image: 
        quay.io/hacbs-release/release-base-image@sha256:9e7fd1a3ccf0d2c8077f565c78e50862a7cc4792d548b5c01c8b09077e6d23a7
      script: |
          #!/usr/bin/env bash
          #
          set -e
          # Tekton wraps the $(param.params) in a JSON string that in some usecase
          # might contain another JSON string that breaks jq parsing, so we need to
          # sanitize it before parsing.
          
          # sanitize 
          #
          # param string `file`
          sanitize() {
            UNESCAPED=$(grep -Po  "(?<=.sanitize.)(.*)+(?=./sanitize.)" ${1})
            SANITIZED="$(printf "'%q'" ${UNESCAPED} | jq -cRs| sed 's|\\|\\\\|g')"
            sed -Ei 's|".sanitize.(.*).\/sanitize."|'${SANITIZED}'|g' ${1}

            # check if jq can parse the result
            jq "." ${1} >/dev/null
            return $?
          }

          # saving the parameters preserving the string as is
          JSON_PARAMS="/tmp/json-params-$$.txt"
          cat > ${JSON_PARAMS} <<JSON
          $(params.params)
          JSON

          # sanitizing the string and 
          sanitize ${JSON_PARAMS}

          # building the InternalRequest yaml
          #
          IR="/workspace/common/ir-$(params.pipelineRunName)-$(params.request).yaml"
          cat > ${IR} <<YAML
          apiVersion: appstudio.redhat.com/v1alpha1
          kind: InternalRequest
          metadata:
            name: "ir-$(params.pipelineRunName)"
          spec:
            request: "$(params.request)"
            params:
          YAML

          LENGTH=`jq ". | length" ${JSON_PARAMS}`
          for (( i=0; i<${LENGTH}; i++ )); do
            INPUT=$(jq -r ".[${i}]|[.name, .value]| @tsv" ${JSON_PARAMS})
            read -r PARAM VALUE <<< "${INPUT}"
            if [ `jq -e ".[${i}]| has(\"jsonKey\")" ${JSON_PARAMS}` == "true" ]; then
                JSON_KEY=`jq -r ".[${i}]|[.jsonKey]| @tsv" ${JSON_PARAMS}`
                VALUE=$(echo "${VALUE}" |tr -d "\\" 2>/dev/null |tr -d "\'" |jq -cr "${JSON_KEY}")
            fi
            echo "    ${PARAM}: \"${VALUE}\"" >> ${IR}
          done
