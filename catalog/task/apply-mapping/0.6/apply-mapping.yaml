---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: apply-mapping
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to apply a mapping to a Snapshot. It will override the Snapshot file.
  params:
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the config workspace to apply the mapping to
      default: "snapshot_spec.json"
    - name: extraConfigPath
      type: string
      description: The path to the config file containing the mapping
      default: ""
    - name: failOnEmptyResult
      type: string
      description: Fail the task if the resulting snapshot contains 0 components
      default: "false"
  workspaces:
    - name: config
      description: The workspace where the extra config file containing the mapping and snapshot json reside
  results:
    - name: mapped
      description: A true/false value depicting whether or not the snapshot was mapped.
  steps:
    - name: apply-mapping
      image:
        quay.io/hacbs-release/release-utils@sha256:5733ece907aa70d6ebced36484c936731e8b27bfcf87fed226a0ecf95047a6b8
      script: |
        #!/usr/bin/env sh
        set -eux

        SNAPSHOT_SPEC_FILE="$(workspaces.config.path)/$(params.snapshotPath)"
        SNAPSHOT_SPEC_FILE_ORIG="${SNAPSHOT_SPEC_FILE}.orig"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        # Copy the original Snapshot spec file before overriding
        cp "${SNAPSHOT_SPEC_FILE}" "${SNAPSHOT_SPEC_FILE_ORIG}"

        CONFIG_FILE="$(workspaces.config.path)/$(params.extraConfigPath)"
        if [ ! -f "${CONFIG_FILE}" ] ; then
            echo "No valid config file was provided."
            echo "false" | tee $(results.mapped.path)
            exit 0
        fi
        if [[ $(yq '.mapping' "${CONFIG_FILE}") == "null" ]] ; then
            echo "Config file contains no mapping key."
            echo "false" | tee $(results.mapped.path)
            exit 0
        fi

        # Create JSON representation of the config so we can use jq
        CONFIG_JSON=$(yq -o=json -I=0 '.' "${CONFIG_FILE}")

        # Merge the mapping key in the config file with the components key in the snapshot based on component name
        # Save the output as a compact json in mapped_snapshot.json file in the workspace
        { echo -n $(cat "${SNAPSHOT_SPEC_FILE_ORIG}"); echo "${CONFIG_JSON}"; } | jq -c -s '.[0] as $snapshot
          | .[0].components + .[1].mapping.components | group_by(.name) | [.[] | select(length > 1)]
          | map(reduce .[] as $x ({}; . * $x)) as $mergedComponents | $snapshot | .components = $mergedComponents' \
          > "${SNAPSHOT_SPEC_FILE}"

        echo "true" | tee $(results.mapped.path)

        if [ "$(params.failOnEmptyResult)" = "true" ] && \
          [ $(cat "${SNAPSHOT_SPEC_FILE}" | jq '.components | length') -eq 0 ]
        then
          echo "ERROR: Resulting snapshot contains 0 components"
          exit 1
        fi
