---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: collect-data
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to collect extra data from release resources and optionally save CRs to a workspace
  params:
    - name: release
      type: string
      description: The namespaced name of the Release
    - name: releaseplan
      type: string
      description: The namespaced name of the ReleasePlan
    - name: releaseplanadmission
      type: string
      description: The namespaced name of the ReleasePlanAdmission
    - name: releasestrategy
      type: string
      description: The namespaced name of the ReleaseStrategy
    - name: snapshot
      type: string
      description: The namespaced name of the Snapshot
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
  workspaces:
    - name: data
      description: Workspace to save the CR jsons to
  results:
    - name: fbcFragment
      description: The first component's containerImage in the snapshot to use in the fbc pipelines
  steps:
    - name: collect-data
      image: quay.io/hacbs-release/release-utils:4d8649dbb2b626f5fe9f4ff83c1bc3be268fad31
      env:
        - name: "RELEASE"
          value: '$(params.release)'
        - name: "RELEASE_PLAN"
          value: '$(params.releaseplan)'
        - name: "RELEASE_PLAN_ADMISSION"
          value: '$(params.releaseplanadmission)'
        - name: "RELEASE_STRATEGY"
          value: '$(params.releasestrategy)'
        - name: "SNAPSHOT"
          value: '$(params.snapshot)'
        - name: "SUBDIR"
          value: '$(workspaces.data.path)/$(params.subdirectory)'
      script: |
        #!/usr/bin/env sh
        set -e

        if [ -n "$(params.subdirectory)" ]; then
          mkdir -p $SUBDIR
        fi

        cd $SUBDIR

        get-resource "release" "${RELEASE}" > "release.json"

        get-resource "releaseplan" "${RELEASE_PLAN}" > "release_plan.json"

        get-resource "releaseplanadmission" "${RELEASE_PLAN_ADMISSION}" \
          > "release_plan_admission.json"

        get-resource "releasestrategy" "${RELEASE_STRATEGY}" > "release_strategy.json"

        get-resource "snapshot" "${SNAPSHOT}" "{.spec}" > "snapshot_spec.json"

        cat "snapshot_spec.json" | jq -cr '.components[0].containerImage' | tr -d "\n" \
          | tee $(results.fbcFragment.path)

        release_result=$(get-resource "release" "${RELEASE}" "{.spec.extraData}")

        release_plan_result=$(get-resource "releaseplan" "${RELEASE_PLAN}" "{.spec.extraData}")

        release_plan_admission_result=$(get-resource "releaseplanadmission" "${RELEASE_PLAN_ADMISSION}" \
            "{.spec.extraData}")

        # Merge Release and ReleasePlan keys. ReleasePlan has higher priority
        merged_output=$(merge-json "$release_result" "$release_plan_result")

        # Merge now with ReleasePlanAdmission keys. ReleasePlanAdmission has higher priority
        merged_output=$(merge-json "$release_result" "$release_plan_admission_result")

        echo "$merged_output" > "extra_data.json"
