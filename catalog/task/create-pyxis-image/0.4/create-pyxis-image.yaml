---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-pyxis-image
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that pushes metadata to Pyxis for all container images contained in a snapshot
  params:
    - name: server
      type: string
      description: The server type to use. Options are 'production' and 'stage'
      default: production
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: certified
      type: string
      description: If set to true, the images will be marked as certified in their Pyxis entries
      default: "false"
    - name: tag
      type: string
      description: Default tag to use if mapping entry does not contain a tag
    - name: isLatest
      type: string
      description: If set to true, the images will have a latest tag added with their Pyxis entries
      default: "false"
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      default: mapped_snapshot.json
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  results:
    - name: containerImageIDs
      description: IDs of the created entries in Pyxis, each on its own line
  steps:
    - name: create-pyxis-image
      image:
        quay.io/hacbs-release/release-utils:b198ed78e14490f194f69cc33137900abe07b848
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      script: |
        #!/usr/bin/env sh
        set -o pipefail

        if [[ "$(params.server)" == "production" ]]
        then
          PYXIS_URL="https://pyxis.api.redhat.com/"
        elif [[ "$(params.server)" == "stage" ]]
        then
          PYXIS_URL="https://pyxis.preprod.api.redhat.com/"
        else
          echo "Invalid server parameter. Only 'production' and 'stage' are allowed."
          exit 1
        fi

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        echo "${pyxisCert}" > /tmp/crt
        echo "${pyxisKey}" > /tmp/key

        for containerImage in $(jq -r '.components[].repository' "${SNAPSHOT_SPEC_FILE}") ; do

            MEDIA_TYPE=$(skopeo inspect --raw "docker://${containerImage}" | jq -r .mediaType)
            skopeo inspect --no-tags "docker://${containerImage}" > /tmp/skopeo-inspect.json

            PYXIS_CERT_PATH=/tmp/crt PYXIS_KEY_PATH=/tmp/key create_container_image \
              --pyxis-url $PYXIS_URL \
              --certified $(params.certified) \
              --tag $(params.tag) \
              --is-latest $(params.isLatest) \
              --verbose \
              --skopeo-result /tmp/skopeo-inspect.json \
              --media-type "$MEDIA_TYPE" | tee /tmp/output

            grep 'The image id is' /tmp/output | awk '{print $NF}' >> $(results.containerImageIDs.path)
        done
