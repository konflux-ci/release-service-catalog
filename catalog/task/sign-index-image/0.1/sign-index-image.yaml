---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sign-index-image
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create an internalrequest to sign a FBC Index Image.
  params:
    - name: requestJsonResults
      type: string
      default: "{}"
      description: The JSON results of the Internal Request
    - name: targetIndex
      type: string
      description: targetIndex signing image
    - name: requestUpdateTimeout
      type: string
      default: "360"
      description: Max seconds waiting for the status update
    - name: signingPipelineImage
      type: string
      default: "quay.io/redhat-isv/operator-pipelines-images:released"
      description: An image with CLI tools needed for the signing
    - name: requester
      type: string
      value: ""
      description: Name of the user that requested the signing, for auditing purposes
    - name: configMapName
      type: string
      description: ConfigMap Name for this request
    - name: pipelineRunName
      type: string
      description: The name of the Parent PipelineRun of this task
  results:
    - name: requestMessage
      description: Internal Request message
    - name: requestReason
      description: Internal Request reason
    - name: requestResults
      description: Internal Request results
  steps:
    - name: sign-index-image
      image:
        quay.io/hacbs-release/release-utils@sha256:5733ece907aa70d6ebced36484c936731e8b27bfcf87fed226a0ecf95047a6b8
      script: |
        #!/usr/bin/env sh
        PATH=/bin:/usr/bin:/usr/local/bin
        export PATH

        jsonInputFile="/tmp/$$.json"
        cat > ${jsonInputFile} <<JSON
        $(params.requestJsonResults)
        JSON

        internalIndexImageCopyResolved=`jq -cr .jsonBuildInfo ${jsonInputFile} \
        | jq -cr .internal_index_image_copy_resolved`

        internalRequest="/tmp/$$"
        cat > ${internalRequest} <<YAML
        ---
        apiVersion: appstudio.redhat.com/v1alpha1
        kind: InternalRequest
        metadata:
          name: "ir-sign-$(params.pipelineRunName)"
        spec:
          request: "hacbs-signing-pipeline"
          params:
            pipeline_image: "$(params.signingPipelineImage)"
            # gets all chars after "@"
            manifest_digest: "${internalIndexImageCopyResolved#*@}"
            reference: "$(params.targetIndex)"
            requester: "$(params.requester)"
            config_map_name: "$(params.configMapName)"
        YAML
        kubectl create -f ${internalRequest}
    - name: watch-internal-request-status
      image:
        quay.io/hacbs-release/release-utils@sha256:5733ece907aa70d6ebced36484c936731e8b27bfcf87fed226a0ecf95047a6b8
      script: |
        #!/usr/bin/env sh
        PATH=/bin:/usr/bin:/usr/local/bin
        TASKRUN="/tmp/$$.sh"

        cat > ${TASKRUN} <<SH
        #!/usr/bin/env sh
        IR="ir-sign-$(params.pipelineRunName)"
        while true; do
          STATUS=\$(kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].status}')
          case "\${STATUS}" in
            True | False )
              kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].reason}' \
              | tee $(results.requestReason.path)
              kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].message}' \
              | tee $(results.requestMessage.path)
              kubectl get internalrequest \${IR} -o jsonpath='{.status.results}' | jq -cR \
              | tee $(results.requestResults.path)
              break
              ;;
            "*")
              ;;
          esac
          sleep 30
        done
        echo ""
        [ \$(kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[0].status}') == "True" ]
        SH
        chmod +x ${TASKRUN}
        timeout $(params.requestUpdateTimeout) ${TASKRUN}
        SYSEXIT=$?
        [ ${SYSEXIT} -eq 124 ] && echo "Timeout while waiting for the internal request update"
        exit ${SYSEXIT}
