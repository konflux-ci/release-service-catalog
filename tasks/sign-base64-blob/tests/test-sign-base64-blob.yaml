---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-base64-blob
spec:
  description: Test creating a internal request to sign a blob
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > "$(workspaces.data.path)"/data.json << EOF
              {
                "sign": {
                  "request": "blob-signing-pipeline",
                  "configMapName": "signing-config-map"
                }
              }
              EOF

              mkdir -p "$(workspaces.data.path)"/binaries
              touch "$(workspaces.data.path)"/binaries/foo_SHA256SUMS
    - name: run-task
      taskRef:
        name: sign-base64-blob
      params:
        - name: requester
          value: testuser
        - name: blob
          value: test-blob
        - name: binariesPath
          value: binaries
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: data.json
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers | \
                sed 's/[[:space:]]*$//')"
              params=$(kubectl get internalrequest "${internalRequest}" -o jsonpath="{.spec.params}")

              if [ "$(jq -r '.blob' <<< "${params}")" != "test-blob" ]; then
                echo "blob does not match"
                exit 1
              fi

              if [ "$(jq -r '.config_map_name' <<< "${params}")" != "signing-config-map" ]
              then
                echo "config_map_name does not match"
                exit 1
              fi

              if [ "$(jq -r '.requester' <<< "${params}")" != "testuser" ]
              then
                echo "requester does not match"
                exit 1
              fi

              if [ "$(jq -r '.pipeline_image' <<< "${params}")" != \
                 "quay.io/redhat-isv/operator-pipelines-images:9ea90b42456fcdf66edf4b15c0c0487ba5fa3ee3" ]
              then
                echo "pipeline_image does not match"
                exit 1
              fi

              binaries_path=$(workspaces.data.path)/binaries
              created_file=$(basename "$(echo "$binaries_path"/*sig*)")
              if [ "$created_file" != "foo_SHA256SUMS.sig" ]; then
                echo "Unexpected filename for the signed file"
                exit 1
              fi

              file_content=$(cat "$binaries_path"/foo_SHA256SUMS.sig)
              if [ "$file_content" != "dummy-payload" ]
              then
                echo "Payload is not correct"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
