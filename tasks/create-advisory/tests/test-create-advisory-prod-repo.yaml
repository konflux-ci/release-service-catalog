---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-advisory-prod-repo
spec:
  description: |
    Run the create-advisory task and verify the internalrequest was created with the proper params
    and using the production secret due to the presence of redhat-prod repos
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      taskSpec:
        steps:
          - name: create-crs
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux
              
              cat > $(workspaces.data.path)/test_release_plan_admission.json << EOF
              {
                "apiVersion": "appstudio.redhat.com/v1alpha1",
                "kind": "ReleasePlanAdmission",
                "metadata": {
                  "name": "test",
                  "namespace": "default"
                },
                "spec": {
                  "applications": [
                    "app"
                  ],
                  "policy": "policy",
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "github.com"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipeline.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "sa"
                  },
                  "origin": "dev"
                }
              }
              EOF

              cat > $(workspaces.data.path)/test_snapshot_spec.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "repository": "repo"
                  }
                ]
              }
              EOF

              cat > $(workspaces.data.path)/data.json << EOF
              {
                "releaseNotes": {
                  "foo": "bar"
                },
                "sign": {
                  "configMapName": "cm"
                },
                "mapping": {
                  "components": [
                    {
                      "name": "comp",
                      "repository": "quay.io/redhat-prod/repo"
                    }
                  ]
                }
              }
              EOF
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: create-advisory
      params:
        - name: releasePlanAdmissionPath
          value: "test_release_plan_admission.json"
        - name: snapshotPath
          value: "test_snapshot_spec.json"
        - name: dataPath
          value: "data.json"
        - name: synchronously
          value: "false"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      params:
        - name: advisory_url
          value: $(tasks.run-task.results.advisory_url)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: advisory_url
            type: string
        workspaces:
          - name: data
        steps:
          - name: check-result
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/bin/sh
              set -ex

              # Count the number of InternalRequests
              requestsCount=$(kubectl get InternalRequest -o json | jq -r '.items | length')
              
              # Check if the number of InternalRequests is as expected
              if [ "$requestsCount" -ne 1 ]; then
                echo "Unexpected number of InternalRequests. Expected: 1, Found: $requestsCount"
                exit 1
              fi

              internalRequest=$(kubectl get InternalRequest -o json | jq -r '.items[0]')

              # Check the request field
              if [ "$(echo "$internalRequest" | jq -r '.spec.request' )" != "create-advisory" ]; then
                echo "InternalRequest doesn't contain 'create-advisory' in 'request' field"
                exit 1
              fi

              # Check the application parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.application' )" != "myapp" ]; then
                echo "InternalRequest has the wrong application parameter"
                exit 1
              fi

              # Check the origin parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.origin' )" != "dev" ]; then
                echo "InternalRequest has the wrong origin parameter"
                exit 1
              fi

              # Check the advisory_json parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.advisory_json' )" != \
              '{"foo":"bar"}' ]; then
                echo "InternalRequest has the wrong advisory_json parameter"
                exit 1
              fi

              # Check the config_map_name parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.config_map_name' )" != "cm" ]; then
                echo "InternalRequest has the wrong config_map_name parameter"
                exit 1
              fi

              echo Test that the advisory_url result was properly set
              test "$(echo $(params.advisory_url))" == "https://github.com/org/repo/advisory"

              # Check the advisory_secret_name parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.advisory_secret_name' )" != \
                "create-advisory-prod-secret" ]; then
                echo "InternalRequest has the wrong advisory_secret_name parameter"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/redhat-appstudio/release-service-utils:447ea0580a2cdd48b4091e1df86fab5c3f86d01c
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
