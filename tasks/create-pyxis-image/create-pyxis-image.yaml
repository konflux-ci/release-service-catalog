---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-pyxis-image
  labels:
    app.kubernetes.io/version: "1.1.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that pushes metadata to Pyxis for all container images contained in a snapshot
  params:
    - name: server
      type: string
      description: The server type to use. Options are 'production' and 'stage'
      default: production
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: certified
      type: string
      description: If set to true, the images will be marked as certified in their Pyxis entries
      default: "false"
    - name: isLatest
      type: string
      description: If set to true, the images will have a latest tag added with their Pyxis entries
      default: "false"
    - name: rhPush
      type: string
      description: >
        If set to true, the registry and repository entries in the Pyxis Container Image object will be
        converted to use Red Hat's official registry. E.g. a mapped repository of
        "quay.io/redhat-pending/product---my-image" will be converted to use registry
        "registry.access.redhat.com" and repository "product/my-image". Also, the image will be
        marked as published.
      default: "false"
    - name: commonTag
      type: string
      description: If set, the 'tag' in the Pyxis Container Image object will be set to it
      default: ""
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      default: mapped_snapshot.json
    - name: dataPath
      type: string
      description: >
        Path to the JSON string of the merged data to use in the data workspace.
        The file is only needed if commonTag parameter is empty in which case it's used to determine the tag to use.
      default: data.json
  workspaces:
    - name: data
      description: The workspace where the snapshot spec and data json files reside
  results:
    - name: containerImageIDs
      type: string
      description: IDs of the created entries in Pyxis, each on its own line
  steps:
    - name: create-pyxis-image
      image: quay.io/hacbs-release/release-utils:b596085a18c7d02007acf3ebbe340a4e4da2a9f4
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      script: |
        #!/usr/bin/env sh
        set -o pipefail

        if [[ "$(params.server)" == "production" ]]
        then
          PYXIS_URL="https://pyxis.api.redhat.com/"
        elif [[ "$(params.server)" == "stage" ]]
        then
          PYXIS_URL="https://pyxis.preprod.api.redhat.com/"
        else
          echo "Invalid server parameter. Only 'production' and 'stage' are allowed."
          exit 1
        fi

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        if [ -n "$(params.commonTag)" ]; then
          TAG="$(params.commonTag)"
        else
          # DATA_FILE is only needed for defaultTag which is only needed if commonTag is empty
          DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
          if [ ! -f "${DATA_FILE}" ] ; then
              echo "No data JSON was provided."
              exit 1
          fi
          TAG=$(jq -r '.images.defaultTag' "${DATA_FILE}")
        fi

        echo "${pyxisCert}" > /tmp/crt
        echo "${pyxisKey}" > /tmp/key

        for containerImage in $(jq -r '.components[].repository' "${SNAPSHOT_SPEC_FILE}") ; do

            MEDIA_TYPE=$(skopeo inspect --raw "docker://${containerImage}" | jq -r .mediaType)
            skopeo inspect --no-tags "docker://${containerImage}" > /tmp/skopeo-inspect.json

            PYXIS_CERT_PATH=/tmp/crt PYXIS_KEY_PATH=/tmp/key create_container_image \
              --pyxis-url $PYXIS_URL \
              --certified $(params.certified) \
              --tag $TAG \
              --is-latest $(params.isLatest) \
              --verbose \
              --skopeo-result /tmp/skopeo-inspect.json \
              --media-type "$MEDIA_TYPE" \
              --rh-push $(params.rhPush) | tee /tmp/output

            grep 'The image id is' /tmp/output | awk '{print $NF}' >> $(results.containerImageIDs.path)
        done
