---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-pyxis-image-one-containerimage-multi-arch
spec:
  description: |
    Run the create-pyxis-image task with a single containerImage in the snapshot and 
    multiple architectures.
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/redhat-appstudio/release-service-utils:447ea0580a2cdd48b4091e1df86fab5c3f86d01c
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > $(workspaces.data.path)/mapped_snapshot.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "source@mydigest",
                    "repository": "registry.io/multi-arch-image"
                  }
                ]
              }
              EOF

              cat > $(workspaces.data.path)/mydata.json << EOF
              {
                "images": {
                  "defaultTag": "testtag"
                }
              }
              EOF
    - name: run-task
      taskRef:
        name: create-pyxis-image
      params:
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: server
          value: stage
        - name: dataPath
          value: mydata.json
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: check-result
            image: quay.io/redhat-appstudio/release-service-utils:447ea0580a2cdd48b4091e1df86fab5c3f86d01c
            script: |
              #!/usr/bin/env sh
              set -eux

              if [ $(cat $(workspaces.data.path)/mock_create_container_image.txt | wc -l) != 2 ]; then
                echo Error: create_container_image was expected to be called 2 time. Actual calls:
                cat $(workspaces.data.path)/mock_create_container_image.txt
                exit 1
              fi

              if ! grep -- "--tags testtag" < $(workspaces.data.path)/mock_create_container_image.txt 3> /dev/null
              then
                echo Error: create_container_image call was expected to include "--tags testtag". Actual call:
                cat $(workspaces.data.path)/mock_create_container_image.txt
                exit 1
              fi

              if ! grep -- "--rh-push false" < $(workspaces.data.path)/mock_create_container_image.txt 3> /dev/null
              then
                echo Error: create_container_image call was expected to include "--rh-push false". Actual call:
                cat $(workspaces.data.path)/mock_create_container_image.txt
                exit 1
              fi

              if [ $(cat $(workspaces.data.path)/mock_skopeo.txt | wc -l) != 3 ]; then
                echo Error: skopeo was expected to be called 3 times. Actual calls:
                cat $(workspaces.data.path)/mock_skopeo.txt
                exit 1
              fi

              [ "$(cat $(workspaces.data.path)/mock_skopeo.txt | head -n 1)" \
              = "inspect --raw docker://registry.io/multi-arch-image@mydigest" ]

              [ "$(cat $(workspaces.data.path)/mock_skopeo.txt | head -n 2 | tail -n 1)" \
              = "inspect --no-tags --override-os linux --override-arch amd64 \
              docker://registry.io/multi-arch-image@mydigest" ]

              # check if the correct arch and image id are set in the json file
              jq -e '.components[0].pyxisImages[0] | ( .arch == "amd64" ) and ( .imageId == "0001" )' \
                $(workspaces.data.path)/pyxis.json

              jq -e '.components[0].pyxisImages[1] | ( .arch == "ppc64le" ) and ( .imageId == "0002" )' \
                $(workspaces.data.path)/pyxis.json

      runAfter:
        - run-task
