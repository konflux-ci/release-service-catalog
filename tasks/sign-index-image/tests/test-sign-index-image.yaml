---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-index-image
spec:
  description: Test creating a internal request to sign an image
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > $(workspaces.data.path)/data.json << EOF
              {
                "sign": {
                  "request": "hacbs-signing-pipeline",
                  "configMapName": "signing-config-map"
                }
              }
              EOF
    - name: run-task
      taskRef:
        name: sign-index-image
      params:
        - name: requester
          value: testuser
        - name: referenceImage
          value: quay.io/testrepo/testimage:tag
        - name: manifestListDigests
          value: "sha256:6f9a420f660e73a sha256:6f9a420f660e73b"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: data.json
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              counter=0
              testValues=('sha256:6f9a420f660e73a' \
                          'sha256:6f9a420f660e73b')
              internalRequests="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers)"
              internalRequestsCount=$(echo $internalRequests | wc -w)

              if [ $internalRequestsCount != "2" ] ; then
                echo "incorrect number of internalRequests created. Expected 2"
                exit 1
              fi

              for internalRequest in ${internalRequests};
              do
                params=$(kubectl get internalrequest ${internalRequest} -o jsonpath="{.spec.params}")

                if [ $(jq -r '.reference' <<< "${params}") != "quay.io/testrepo/testimage:tag" ]; then
                  echo "reference image does not match"
                  exit 1
                fi

                if [ $(jq -r '.manifest_digest' <<< "${params}") != "${testValues[$counter]}" ]; then
                  echo "manifest_digest does not match"
                  exit 1
                fi

                if [ $(jq -r '.config_map_name' <<< "${params}") != "signing-config-map" ]
                then
                  echo "config_map_name does not match"
                  exit 1
                fi

                if [ $(jq -r '.requester' <<< "${params}") != "testuser" ]
                then
                  echo "requester does not match"
                  exit 1
                fi

                if [ $(jq -r '.pipeline_image' <<< "${params}") != \
                   "quay.io/redhat-isv/operator-pipelines-images:released" ]
                then
                  echo "pipeline_image does not match"
                  exit 1
                fi

                counter=$((counter+1))
              done
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
