---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-index-image
  labels:
    app.kubernetes.io/version: "3.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create an internalrequest to sign a FBC Index Image.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: "data.json"
    - name: request
      type: string
      description: Signing pipeline name to handle this request
      default: "hacbs-signing-pipeline"
    - name: referenceImage
      type: string
      description: The image to be signed.
    - name: manifestListDigests
      type: string
      description: The manifest digests for each arch in manifest list
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-index-image
      image:
        quay.io/redhat-appstudio/release-service-utils:c6989496ce3326ae2556bd5afb992da13e94d3ea
      script: |
        #!/usr/bin/env sh
        set -e

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        request=$(jq -r '.sign.request // .fbc.request // "$(params.request)"' ${DATA_FILE})
        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:released"
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // .fbc.pipelineImage // $default_pipeline_image' ${DATA_FILE})
        config_map_name=$(jq -r '.sign.configMapName // .fbc.configMapName // "signing-config-map"' ${DATA_FILE})
        reference_image=$(params.referenceImage)

        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"

        # Translate direct quay.io reference to public facing registry reference
        # quay.io/redhat/product----repo -> registry.redhat.io/product/repo
        reference_image=$(translate-delivery-repo $reference_image | jq -r '.[] | select(.repo=="redhat.io") | .url')

        # get all digests from manifest list
        for manifest_digest in $(params.manifestListDigests)
        do
          echo "Creating InternalRequest to sign image:"
          echo "- reference=${reference_image}"
          echo "- manifest_digest=${manifest_digest}"
          echo "- requester=$(params.requester)"

          internal-request -r "${request}" \
              -p pipeline_image=${pipeline_image} \
              -p reference=${reference_image} \
              -p manifest_digest=${manifest_digest} \
              -p requester=$(params.requester) \
              -p config_map_name=${config_map_name} \
              -t $(params.requestTimeout) \
              -l ${pipelinerun_label}=$(params.pipelineRunUid)
          echo "done"
        done
