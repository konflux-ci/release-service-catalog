---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-collect-data
spec:
  description: |
    Run the collect-data task and verify that all resources are stored in the workspace.
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      taskSpec:
        steps:
          - name: create-crs
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > release << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Release
              metadata:
                name: release-sample
                namespace: default
              spec:
                snapshot: foo
                releasePlan: foo
              EOF
              kubectl apply -f release

              cat > releaseplan << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleasePlan
              metadata:
                name: releaseplan-sample
                namespace: default
              spec:
                application: foo
                target: foo
              EOF
              kubectl apply -f releaseplan

              cat > releaseplanadmission << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleasePlanAdmission
              metadata:
                name: releaseplanadmission-sample
                namespace: default
              spec:
                applications:
                  - foo
                origin: foo
                policy: foo
                pipeline:
                  pipelineRef:
                    resolver: cluster
                    params:
                      - name: name
                        value: release-pipeline
                      - name: namespace
                        value: default
                      - name: kind
                        value: pipeline
              EOF
              kubectl apply -f releaseplanadmission

              cat > releaseserviceconfig << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleaseServiceConfig
              metadata:
                name: releaseserviceconfig-sample
                namespace: default
              spec:
              EOF
              kubectl apply -f releaseserviceconfig

              cat > snapshot << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Snapshot
              metadata:
                name: snapshot-sample
                namespace: default
              spec:
                application: foo
                components:
                  - name: name
                    containerImage: newimage
              EOF
              kubectl apply -f snapshot
    - name: run-task
      taskRef:
        name: collect-data
      params:
        - name: release
          value: default/release-sample
        - name: releasePlan
          value: default/releaseplan-sample
        - name: releasePlanAdmission
          value: default/releaseplanadmission-sample
        - name: releaseServiceConfig
          value: default/releaseserviceconfig-sample
        - name: snapshot
          value: default/snapshot-sample
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      params:
        - name: resultsDir
          value: $(tasks.run-task.results.resultsDir)
        - name: release
          value: $(tasks.run-task.results.release)
        - name: releasePlan
          value: $(tasks.run-task.results.releasePlan)
        - name: releasePlanAdmission
          value: $(tasks.run-task.results.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(tasks.run-task.results.releaseServiceConfig)
        - name: snapshotSpec
          value: $(tasks.run-task.results.snapshotSpec)
        - name: fbcFragment
          value: $(tasks.run-task.results.fbcFragment)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: resultsDir
            type: string
          - name: release
            type: string
          - name: releasePlan
            type: string
          - name: releasePlanAdmission
            type: string
          - name: releaseServiceConfig
            type: string
          - name: snapshotSpec
            type: string
          - name: fbcFragment
            type: string
        workspaces:
          - name: data
        steps:
          - name: check-result
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              echo Test that the results directory was created
              test -d "$(workspaces.data.path)/$(resultsDir)"

              echo Test that Release CR was saved to workspace
              test $(cat "$(workspaces.data.path)/$(params.release)" | jq -r '.metadata.name') == release-sample

              echo Test that ReleasePlan CR was saved to workspace
              test $(cat "$(workspaces.data.path)/$(params.releasePlan)" | jq -r '.metadata.name') == releaseplan-sample

              echo Test that ReleasePlanAdmission CR was saved to workspace
              test $(cat "$(workspaces.data.path)/$(params.releasePlanAdmission)" \
                  | jq -r '.metadata.name') == releaseplanadmission-sample

              echo Test that ReleaseServiceConfig CR was saved to workspace
              test $(cat "$(workspaces.data.path)/$(params.releaseServiceConfig)" \
                  | jq -r '.metadata.name') == releaseserviceconfig-sample

              echo Test that Snapshot spec was saved to workspace
              test $(cat "$(workspaces.data.path)/$(params.snapshotSpec)" | jq -r '.application') == foo

              echo Test the fbcFragment result was properly set
              test $(echo $(params.fbcFragment)) == "newimage"
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete release release-sample
              kubectl delete releaseplan releaseplan-sample
              kubectl delete releaseplanadmission releaseplanadmission-sample
              kubectl delete releaseserviceconfig releaseserviceconfig-sample
              kubectl delete snapshot snapshot-sample
