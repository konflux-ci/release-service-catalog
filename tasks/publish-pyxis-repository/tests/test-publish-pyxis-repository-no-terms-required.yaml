---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-publish-pyxis-repository-no-terms-required
spec:
  description: |
    Run the publish-pyxis-repository task with multiple components where some of them
    don't require terms, so these should be included in the signRegistryAccessPath result.
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(workspaces.data.path)/results"

              cat > $(workspaces.data.path)/snapshot_spec.json << EOF
              {
                "application": "my-app",
                "components": [
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image1",
                    "name": "component1"
                  },
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image5",
                    "name": "component2"
                  },
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image6",
                    "name": "component3"
                  }
                ]
              }
              EOF

              cat > "$(workspaces.data.path)/mydata.json" << EOF
              {
                "mapping": {
                }
              }
              EOF
    - name: run-task
      taskRef:
        name: publish-pyxis-repository
      params:
        - name: pyxisSecret
          value: test-publish-pyxis-repository-cert
        - name: snapshotPath
          value: snapshot_spec.json
        - name: dataPath
          value: mydata.json
        - name: resultsDirPath
          value: results
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: signRegistryAccessPath
          value: $(tasks.run-task.results.signRegistryAccessPath)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: signRegistryAccessPath
        workspaces:
          - name: data
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              RESULTS_FILE="$(workspaces.data.path)/results/publish-pyxis-repository-results.json"

              if [ ! -f "$RESULTS_FILE" ]; then
                  echo "Error: Results file not found."
                  exit 1
              fi

              EXPECTED_RESULTS='{
                "catalog_urls": [
                  {
                    "name": "component1",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image1/1"
                  },
                  {
                    "name": "component2",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image5/3"
                  },
                  {
                    "name": "component3",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image6/5"
                  }
                ]
              }'

              # Use jq to compare JSON objects
              if ! echo "$EXPECTED_RESULTS" | jq --argfile actual "$RESULTS_FILE" -e '. == $actual' > /dev/null; then
                  echo "Error: Results do not match expected output."
                  echo "Expected: $EXPECTED_RESULTS"
                  echo "Actual: $(cat "$RESULTS_FILE")"
                  exit 1
              fi

              if [ $(cat $(workspaces.data.path)/mock_curl.txt | wc -l) != 6 ]; then
                  echo Error: curl was expected to be called 6 times. Actual calls:
                  cat $(workspaces.data.path)/mock_curl.txt
                  exit 1
              fi

              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 1) \
                  == *"/my-product/my-image1 "* ]]
              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 2 | tail -n 1) \
                  == *"/id/1 "* ]]
              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 3 | tail -n 1) \
                  == *"/my-product/my-image5 "* ]]
              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 4 | tail -n 1) \
                  == *"/id/3 "* ]]
              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 5 | tail -n 1) \
                  == *"/my-product/my-image6 "* ]]
              [[ $(cat $(workspaces.data.path)/mock_curl.txt | head -n 6 | tail -n 1) \
                  == *"/id/5 "* ]]

              EXPECTED_RESULTS='my-product/my-image5
              my-product/my-image6'

              SIGN_ACCESS_FILE="$(workspaces.data.path)/$(params.signRegistryAccessPath)"
              if [ "$(cat "$SIGN_ACCESS_FILE")" != "$EXPECTED_RESULTS" ]; then
                echo "Error: The signRegistryAccessPath file was expected to contain:"
                echo "$EXPECTED_RESULTS"
                echo "Instead it contains:"
                cat "$SIGN_ACCESS_FILE"
                exit 1
              fi
      runAfter:
        - run-task
