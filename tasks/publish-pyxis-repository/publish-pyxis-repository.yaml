---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-pyxis-repository
  labels:
    app.kubernetes.io/version: "0.3.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to mark all repositories in the mapped snapshot as published in Pyxis.
    This is currently only intended for the rh-push-to-registry-redhat-io pipeline,
    so it will convert the values to the ones used for registry.redhat.io releases.
    E.g. repository "quay.io/redhat-prod/my-product----my-image" will be converted
    to use registry "registry.access.redhat.com" and repository "my-product/my-image"
    to identify the right Container Registry object in Pyxis. The task also optionally
    marks the repositories as source_container_image_enabled true if pushSourceContainer
    is true in the data JSON.
    Additionally, this task respects the `publish-on-push` flag. If `false`, then the task
    does not publish the repository.
  params:
    - name: server
      type: string
      description: The server type to use. Options are 'production','production-internal,'stage-internal' and 'stage'.
      default: production
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: snapshotPath
      description: Path to the JSON file containing the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  steps:
    - name: publish-pyxis-repository
      image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      script: |
        #!/usr/bin/env bash
        set -eu

        PYXIS_REGISTRY=registry.access.redhat.com

        if [[ "$(params.server)" == "production" ]]
        then
          PYXIS_URL="https://pyxis.api.redhat.com"
        elif [[ "$(params.server)" == "stage" ]]
        then
          PYXIS_URL="https://pyxis.preprod.api.redhat.com"
        elif [[ "$(params.server)" == "production-internal" ]]
        then
          PYXIS_URL="https://pyxis.engineering.redhat.com"
        elif [[ "$(params.server)" == "stage-internal" ]]
        then
          PYXIS_URL="https://pyxis.stage.engineering.redhat.com"
        else
          echo "Invalid server parameter. Only 'production','production-internal,'stage-internal' and 'stage' allowed."
          exit 1
        fi

        echo "${pyxisCert}" > /tmp/crt
        echo "${pyxisKey}" > /tmp/key

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        PAYLOAD='{"published":true}'

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [[ -f "${DATA_FILE}" && $(jq -r '.images.pushSourceContainer' ${DATA_FILE}) == "true" ]] ; then
            PAYLOAD=$(jq -c '. += {"source_container_image_enabled":true}' <<< $PAYLOAD)
        fi

        application=$(jq -r '.application' "${SNAPSHOT_SPEC_FILE}")
        printf 'Beginning "%s" for "%s"\n\n' "$(context.task.name)" "$application"

        for REPOSITORY in $(jq -r '.components[].repository' "${SNAPSHOT_SPEC_FILE}")
        do
            PYXIS_REPOSITORY=${REPOSITORY##*/}
            # Replace "----" with "/"
            PYXIS_REPOSITORY=${PYXIS_REPOSITORY//----//}
            PYXIS_REPOSITORY_JSON=$(curl --retry 5 --key /tmp/key --cert /tmp/crt \
                "${PYXIS_URL}/v1/repositories/registry/${PYXIS_REGISTRY}/repository/${PYXIS_REPOSITORY}" -X GET)
        
            PYXIS_REPOSITORY_ID=$(jq -r '._id // ""' <<< $PYXIS_REPOSITORY_JSON)
            if [ -z "$PYXIS_REPOSITORY_ID" ]; then
                echo Error: Unable to get Container Repository object id from Pyxis
                echo "Pyxis response for ${PYXIS_REGISTRY}/${PYXIS_REPOSITORY}:"
                echo $PYXIS_REPOSITORY_JSON
                exit 1
            fi

            # verify that publish_on_push is set to true.
            # otherwise, do not publish the image.
            PYXIS_REPOSITORY_PUBLISH_ON_PUSH=$(jq -r '.publish_on_push // "false"' <<< $PYXIS_REPOSITORY_JSON)
            if [ "${PYXIS_REPOSITORY_PUBLISH_ON_PUSH}" != "true" ] ; then
              echo "WARNING: repository ${PYXIS_REGISTRY}/${PYXIS_REPOSITORY} is marked as publish_on_push = false"
              echo "Skipping the setting of the published flag."
              continue
            fi
        
            curl --retry 5 --key /tmp/key --cert /tmp/crt "${PYXIS_URL}/v1/repositories/id/${PYXIS_REPOSITORY_ID}" \
                -X PATCH -H 'Content-Type: application/json' --data-binary "${PAYLOAD}"
        done

        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$application"
