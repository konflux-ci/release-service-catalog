---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-ocp-tag
  labels:
    app.kubernetes.io/version: "1.4.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to update pull-spec tag with the OCP version gotten from the get-ocp-version task. The replacement only
    occurs when the {{ OCP_VERSION }} placeholder is present.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: ocpVersion
      description: OCP version tag to replace the current set tags on index images
      type: string
  results:
    - name: updated-fromIndex
      type: string
      description: source Index image (catalog of catalogs) FBC fragment with updated tag
    - name: updated-targetIndex
      type: string
      description: Index image (catalog of catalogs) the FBC fragment will be added to with updated tag
    - name: updated-binaryImage
      type: string
      description: OCP binary image to be baked into the index image with updated tag
  workspaces:
    - name: data
      description: The workspace where the snapshot spec and data json files reside
  steps:
    - name: update-ocp-tag
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
       #!/usr/bin/env bash
       set -eux

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        # The replace_tag function receives a FBC index image as parameter and replaces it with the ocpVersion found
        # by the `get-ocp-version` task, when the {{ OCP_VERSION }} placeholder is present.
        replace_tag() {
            # replaces the tag if the placeholder exists
            sed -E "s/\{\{(\\s+)?OCP_VERSION(\\s+)?\}\}/$(params.ocpVersion)/g" <<< "${1}"
        }

        # The validateOCPVersion function receives the tag version of a given index and the OCP version of a given
        # base image as parameters, returning valid (0) if the arguments match each other
        validateOCPVersion() {
          indexVersion="${1#*:}"
          expectedOCPVersion="${2}"
          if [ "${indexVersion}" != "${expectedOCPVersion}" ]; then
            echo "The OCP version of the targetIndex does not match with the base image"
            echo "- index version: ${indexVersion}"
            echo "- base image version: ${expectedOCPVersion}"
            return 1
          fi
        }

        # Access the updated image
        updatedFromIndex=$(replace_tag "$(jq -r '.fbc.fromIndex' "$DATA_FILE")")
        updatedTargetIndex=$(replace_tag "$(jq -r '.fbc.targetIndex' "$DATA_FILE")")
        updatedBinaryImage=$(replace_tag "$(jq -r '.fbc.binaryImage' "$DATA_FILE")")

        # if {{OCP_VERSION}} is not set, the original targetIndex will be kept but its ocp version should
        # match base image version.
        for index in "${updatedFromIndex}" "${updatedTargetIndex}" "${updatedBinaryImage}"; do
          validateOCPVersion "${index}" "$(params.ocpVersion)"
        done

        echo "Updated values"
        echo -n "$updatedFromIndex" | tee "$(results.updated-fromIndex.path)"
        echo
        echo -n "$updatedTargetIndex" | tee "$(results.updated-targetIndex.path)"
        echo
        echo -n "$updatedBinaryImage" | tee "$(results.updated-binaryImage.path)"
        echo
