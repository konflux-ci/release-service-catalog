---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-snapshot
  labels:
    app.kubernetes.io/version: "0.12.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push snapshot images to an image registry using `cosign copy`
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
      default: "mapped_snapshot.json"
    - name: tag
      description: Default tag to use if mapping entry does not contain a tag. Not used when tagPrefix is set
      type: string
      default: "latest"
    - name: tagPrefix
      description: The prefix used to build the tag in <prefix>-<timestamp> format
      type: string
      default: ""
    - name: timestampFormat
      description: Timestamp format used to build the tag when tagPrefix is set
      type: string
      default: "%s"
    - name: retries
      description: Retry copy N times.
      type: string
      default: "0"
    - name: addGitShaTag
      description: Also push a tag with the git sha for each image in the Snapshot
      type: string
      default: "true"
    - name: addSourceShaTag
      description: Also push a tag with the source sha for each image in the Snapshot
      type: string
      default: "true"
    - name: addTimestampTag
      description: Also push a tag with the current timestamp for each image in the Snapshot
      type: string
      default: "false"
  results:
    - name: commonTag
      type: string
      description: Common tag for downstream tasks. Only set if tagPrefix length is nonzero
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  steps:
    - name: push-snapshot
      image:
        quay.io/hacbs-release/release-utils@sha256:fbe973077b00242eeb3d25101def1be286c621436c5a003527736eabb48f0398
      script: |
        #!/usr/bin/env bash
        set -eux

        push_image () { # Expected arguments are [name, containerImage, repository, tag]
          printf '* Pushing component: %s to %s:%s\n' "$1" "$3" "$4"
          attempt=0
          until [ "$attempt" -gt "$(params.retries)" ] ; do # 0 retries by default which will execute this once
            cosign copy -f "$2" "$3:$4" && break
            attempt=$((attempt+1))
          done
          if [ "$attempt" -gt "$(params.retries)" ] ; then
            echo "Max retries exceeded."
            exit 1
          fi
        }

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        prefixedTag=""
        if [ -n "$(params.tagPrefix)" ]; then
            prefixedTag="$(params.tagPrefix)-$(date "+$(params.timestampFormat)")"
        fi
        echo -n "${prefixedTag}" > $(results.commonTag.path)

        application=$(jq -r '.application' "${SNAPSHOT_SPEC_FILE}")
        printf 'Beginning "%s" for "%s"\n\n' "$(context.task.name)" "$application"
        for component in $(jq -rc '.components[]' "${SNAPSHOT_SPEC_FILE}")
        do
          containerImage=$(jq -r '.containerImage' <<< $component)
          repository=$(jq -r '.repository' <<< $component)
          name=$(jq -r '.name' <<< $component)
          git_sha=$(jq -r '.source.git.revision' <<< $component) # this sets the value to "null" if it doesn't exist
          #
          # The tag is determined as follows:
          #
          # If the value of the task parameter `tagPrefix` has a non-zero length, the tag value is built by
          # the task in `<prefix>-<timestamp>` format, where prefix is the value of `tagPrefix` and `timestamp`
          # is the output of the date command using the value of `timestampFormat` as argument.
          #
          # Otherwise the tag used is the one existent in the component or in case it is absent, it uses
          # the value set for the task parameter `tag`.
          #
          if [ -n "${prefixedTag}" ] ; then
              tag="${prefixedTag}"
          else
              tag=$(jq -r '.tag // "$(params.tag)"' <<< $component)
          fi

          source_digest=$(skopeo inspect \
            --no-tags \
            --format '{{.Digest}}' \
            "docker://${containerImage}" 2>/dev/null)
          # note: Inspection might fail on empty repos, hence `|| true`
          destination_digest=$(
            skopeo inspect \
            --no-tags \
            --format '{{.Digest}}' \
            "docker://${repository}:${tag}" 2>/dev/null || true)
          if [[ "$destination_digest" != "$source_digest" || -z "$destination_digest" ]]; then
            push_image "${name}" "${containerImage}" "${repository}" "${tag}"
            if [ $(params.addTimestampTag) = true ] ; then
              timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ" | sed 's/:/-/g')
              push_image "${name}" "${containerImage}" "${repository}" "$timestamp"
            fi
            if [ $(params.addGitShaTag) = true ] ; then
              if [ "${git_sha}" != "null" ] ; then
                push_image "${name}" "${containerImage}" "${repository}" "${git_sha:0:7}"
                push_image "${name}" "${containerImage}" "${repository}" "${git_sha}"
              else
                printf 'Asked to create git sha based tag, but no git sha found in %s\n' "${component}"
                exit 1
              fi
            fi
            if [ $(params.addSourceShaTag) = true ] ; then
              if [[ "${containerImage}" == *"@sha256"* && $(echo "${containerImage}" | tr -cd ':' | wc -c) -eq 1 ]]
              then
                sha=$(echo "${containerImage}" | cut -d ':' -f 2)
                push_image "${name}" "${containerImage}" "${repository}" "${sha}"
              else
                printf 'Asked to create source sha based tag, but no sha found in %s\n' "${containerImage}"
                exit 1
              fi
            fi
          else
            printf '* Component push skipped (source digest exists at destination): %s (%s)\n' \
              "${name}" "$source_digest"
          fi
        done
        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$application"
