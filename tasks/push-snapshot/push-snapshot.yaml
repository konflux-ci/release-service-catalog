---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-snapshot
  labels:
    app.kubernetes.io/version: "6.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push snapshot images to an image registry using `cosign copy`
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: resultsDirPath
      description: Path to the results directory in the data workspace
      type: string
    - name: retries
      description: Retry copy N times.
      type: string
      default: "0"
  workspaces:
    - name: data
      description: The workspace where the snapshot spec and data json files reside
  steps:
    - name: push-snapshot
      image: quay.io/konflux-ci/release-service-utils:12841cd2a35711b24a6749a93569d4118b173dcb
      script: |
        #!/usr/bin/env bash
        set -eux

        push_image () { # Expected arguments are [origin_digest, name, containerImage, repository, tag, arch, oras_args]
          # note: Inspection might fail on empty repos, hence `|| true`

          # oras has very limited support for selecting the right auth entry,
          # so create a custom auth file with just one entry.
          DEST_AUTH_FILE=$(mktemp)
          select-oci-auth "$4:$5" > "$DEST_AUTH_FILE"

          # We need this default value for $7 when oras_args is equal to ()
          destination_digest=$(oras resolve --registry-config "$DEST_AUTH_FILE" ${7:-} "$4:$5" 2>/dev/null || true)

          if [[ "$destination_digest" != "$1" || -z "$destination_digest" ]]; then
            printf '* Pushing component: %s to %s:%s\n' "$2" "$4" "$5"
            attempt=0
            until [ "$attempt" -gt "$(params.retries)" ] ; do # 0 retries by default which will execute this once
              cosign copy -f "$3" "$4:$5" && break
              attempt=$((attempt+1))
            done
            if [ "$attempt" -gt "$(params.retries)" ] ; then
              echo "Max retries exceeded."
              exit 1
            fi
          else
            printf '* Component push skipped (source digest exists at destination): %s (%s)\n' \
              "$2" "$3"
          fi
          RESULTS_JSON=$(jq --arg name "$2" --arg url "$4:$5" '.images |= map(select(.name==$name).urls +=
            [$url])' <<< "$RESULTS_JSON")
        }

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        if [ $(jq '.components | map(select((has("tags")|not) or (.tags | IN([])))) | length' \
          "${SNAPSHOT_SPEC_FILE}") -ne 0 ] ; then
            echo "Found components in the snapshot file that do not contain tags. Failing"
            cat "${SNAPSHOT_SPEC_FILE}"
            exit 1
        fi

        RESULTS_FILE="$(workspaces.data.path)/$(params.resultsDirPath)/push-snapshot-results.json"
        RESULTS_JSON='{"images":[]}'

        defaultPushSourceContainer=$(jq -r '.mapping.defaults.pushSourceContainer' $DATA_FILE)

        application=$(jq -r '.application' "${SNAPSHOT_SPEC_FILE}")
        NUM_COMPONENTS=$(jq '.components | length' "${SNAPSHOT_SPEC_FILE}")
        printf 'Beginning "%s" for "%s"\n\n' "$(context.task.name)" "$application"
        for ((i = 0; i < $NUM_COMPONENTS; i++))
        do
          component=$(jq -c --argjson i "$i" '.components[$i]' "${SNAPSHOT_SPEC_FILE}")
          containerImage=$(jq -r '.containerImage' <<< $component)
          repository=$(jq -r '.repository' <<< $component)
          imageTags=$(jq '.tags' <<< $component)

          # oras has very limited support for selecting the right auth entry,
          # so create a custom auth file with just one entry.
          AUTH_FILE=$(mktemp)
          select-oci-auth "${containerImage}" > "$AUTH_FILE"

          arch_json=$(get-image-architectures "${containerImage}")
          arches=$(jq -s 'map(.platform.architecture)' <<< $arch_json)
          oses=$(jq -s 'map(.platform.os)' <<< $arch_json)
        
          # Just read the first from the list of architectures
          os=$(jq -r '.[0]' <<< $oses)
          arch=$(jq -r '.[0]' <<< $arches)
          name=$(jq -r '.name' <<< $component)
          git_sha=$(jq -r '.source.git.revision' <<< $component) # this sets the value to "null" if it doesn't exist
          media_type=$(skopeo inspect --raw "docker://${containerImage}" | jq -r .mediaType)
          oras_args=()
          if [[ "$media_type" == "application/vnd.docker.distribution.manifest.list.v2+json" ]]\
            || [[ "$media_type" == "application/vnd.oci.image.index.v1+json" ]]; then
            # need to add separately or else the args get treated as 1 argument
            # and oras complains about "Error: unknown flag: --platform linux/amd64"
            oras_args+=("--platform")
            oras_args+=("$os/$arch")
          fi

          origin_digest=$(oras resolve --registry-config "$AUTH_FILE" "${oras_args[@]}" "${containerImage}" 2>/dev/null)

          RESULTS_JSON=$(jq --arg i "$i" --argjson arches "$arches" --argjson oses "$oses" --arg name "$name" \
            --arg sha "$origin_digest" \
            '.images[$i|tonumber] += {"arches": $arches, "oses": $oses, "name": $name, "shasum": $sha, "urls": []}' \
              <<< $RESULTS_JSON)

          # Push source container if the component has pushSourceContainer: true or if the
          # pushSourceContainer key is missing from the component and the defaults has
          # pushSourceContainer: true
          if [[ $(jq -r '.pushSourceContainer' <<< $component) == "true" ]] \
            || [[ $(jq 'has("pushSourceContainer")' <<< $component) == "false" && \
                  ${defaultPushSourceContainer} == "true" ]] ; then

            source_repo=${containerImage%%@sha256:*}
            source_tag=${origin_digest/:/-}.src
            # Calculate the source container image based on the provided container image
            sourceContainer="${source_repo}:${source_tag}"
            # Check if the source container exists
            source_container_digest=$(oras resolve --registry-config "$AUTH_FILE" "${oras_args[@]}" \
              "${sourceContainer}" 2>/dev/null)

            if [ -z "$source_container_digest" ] ; then
              echo "Error: Source container ${sourceContainer} not found!"
              exit 1
            fi
            # Push the source image with the source tag here. The source image will be
            # pushed with the provided tags below in the loop
            push_image "${source_container_digest}" "${name}" "${sourceContainer}" \
              "${repository}" "${source_tag}" "${oras_args[@]}"
          fi

          for tag in $(jq -r '.[]' <<< $imageTags) ; do
            # Push the container image
            push_image "${origin_digest}" "${name}" "${containerImage}" "${repository}" "${tag}" \
            "${arch}" "${oras_args[@]}"

            # This variable will only exist if the above logic determined the source container should
            # be pushed for this component
            if [ -n "${source_container_digest-}" ] ; then
              push_image "${source_container_digest}" "${name}" "${sourceContainer}" \
                "${repository}" "${tag}-source" "${arch}" "${oras_args[@]}"
            fi
          done
        done
        echo -n "${RESULTS_JSON}" | tee $RESULTS_FILE
        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$application"
