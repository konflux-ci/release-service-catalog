---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-binaries-checksum
spec:
  description: |
    Run the sign-binaries task and verify the results
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux
               cat > "$(workspaces.data.path)/data.json" << EOF
              {
                "somekey": {
                  "key": "value",
                  "foo": "bar"
                }
              }
              EOF
              mkdir -p "$(workspaces.data.path)/content"
              cd "$(workspaces.data.path)/content"

              cat > "linux_binary.bin" << EOF
              some data
              EOF
              gzip --keep linux_binary.bin

              cat > "darwin_binary.bin" << EOF
              some data
              EOF
              gzip --keep darwin_binary.bin

              cat > "windows_binary.bin" << EOF
              some data
              EOF
              gzip --keep windows_binary.bin

              # Create release.json status.attribution.author
              cat > "$(workspaces.data.path)/release.json" << EOF
              {
                "status": {
                  "attribution": {
                    "author": "John Doe"
                  }
                }
              }
              EOF

              # Create binaries in signed directory
              mkdir -p "$(workspaces.data.path)/content/signed/"
              cat > "$(workspaces.data.path)/content/signed/mac_binary.bin" << EOF
              more data
              EOF
              cat > "$(workspaces.data.path)/content/signed/windows_binary.bin" << EOF
              even more data
              EOF
    - name: run-task
      taskRef:
        name: sign-binaries
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: windowsCredentials
          value: windows-credentials
        - name: ssh_key_secret
          value: windows-ssh-key
        - name: macHostCredentials
          value: mac-host-credentials
        - name: macSigningCredentials
          value: mac-signing-credentials
        - name: quaySecret
          value: quay-secret
        - name: quayURL
          value: quay.io/konflux-artifacts
        - name: pipelineRunUid
          value: 12345678
        - name: releasePath
          value: "release.json"
        - name: contentDir
          value: "content"
        - name: checksumUser
          value: konflux-release-signing-sa
        - name: checksumHost
          value: etera-worker.hosted.upshift.rdu2.redhat.com
        - name: kerberosRealm
          value: IPA.REDHAT.COM
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: signedWindowsDigest
          value: $(tasks.run-task.results.signedWindowsDigest)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: signedWindowsDigest
            description: The digest of the signed content pushed using ORAS for signing hosts
            type: string
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash

              expected_calls="3"
              actual_content=$(cat "$(workspaces.data.path)/ssh_calls_checksum.txt")
              if [[ "$actual_content" == "$expected_calls" ]]; then
                  echo "Test passed: SSH called three times as expected."
              else
                  echo "Test failed: SSH not called expected number of times."
                  echo "Expected: '$expected_calls'"
                  echo "Actual: '$actual_content'"
                  exit 1
              fi

              # assert sha256sum.txt is generated properly
              expected_sha256sum="5aa03f96c77536579166fba147929626cc3a97960e994057a9d80271a736d10f  linux_binary.bin
              1307990e6ba5ca145eb35e99182a9bec46531bc54ddf656a602c780fa0240dee  mac_binary.bin
              1307990e6ba5ca145eb35e99182a9bec46531bc54ddf656a602c780fa0240dee  windows_binary.bin"
              actual_sha256sum=$(cat "$(workspaces.data.path)/content/signed/sha256sum.txt")
              if [[ "$actual_sha256sum" == "$expected_sha256sum" ]]; then
                  echo "Test passed: sha256sum.txt is generated properly."
              else
                  echo "Test failed: sha256sum.txt is not generated properly."
                  echo "Expected: '$expected_sha256sum'"
                  echo "Actual: '$actual_sha256sum'"
                  exit 1
              fi

              actual=$(cat "$(workspaces.data.path)/mock_scp_1_checksum.txt")
              expected_scp="-o UserKnownHostsFile=/root/.ssh/known_hosts \
              -o GSSAPIAuthentication=yes \
              -o GSSAPIDelegateCredentials=yes \
              /workspace/data/content/sha256sum.txt \
              konflux-release-signing-sa@etera-worker.hosted.upshift.rdu2.redhat.com:~/12345678/checksum"
              normalized_expected=$(echo "$expected_scp" | tr -s '[:space:]')
              normalized_actual=$(echo "$actual" | tr -s '[:space:]')
              if [[ "$normalized_actual" == "$normalized_expected" ]]; then
                  echo "Test passed: First SCP command is correct."
              else
                  echo "Test failed: First SCP command is incorrect."
                  echo "Expected: '$normalized_expected'"
                  echo "Actual: '$normalized_actual'"
                  exit 1
              fi

              # check second scp command
              actual=$(cat "$(workspaces.data.path)/mock_scp_2_checksum.txt")
              expected_scp="-o UserKnownHostsFile=/root/.ssh/known_hosts \
              -o GSSAPIAuthentication=yes -o \
              GSSAPIDelegateCredentials=yes \
              konflux-release-signing-sa@etera-worker.hosted.upshift.rdu2.redhat.com:\
              ~/12345678/checksum/sha256sum.txt.sig \
              /workspace/data/content/signed/sha256sum.txt.sig"
              normalized_expected=$(echo "$expected_scp" | tr -s '[:space:]')
              normalized_actual=$(echo "$actual" | tr -s '[:space:]')
              if [[ "$normalized_actual" == "$normalized_expected" ]]; then
                  echo "Test passed: Second SCP command is correct."
              else
                  echo "Test failed: Second SCP command is incorrect."
                  echo "Expected: '$normalized_expected'"
                  echo "Actual: '$normalized_actual'"
                  exit 1
              fi
      runAfter:
        - run-task
