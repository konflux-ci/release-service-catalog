---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-binaries
  labels:
    app.kubernetes.io/version: "1.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to sign windows and mac binaries before they are pushed to the Red Hat Developer Portal
  params:
    - name: quayURL
      type: string
      description: quay URL of the repo where content will be shared
    - name: quaySecret
      type: string
      description: Secret to interact with Quay
    - name: windowsCredentials
      type: string
      description: Secret to interact with the Windows signing host
    - name: windowsSSHKey
      type: string
      description: Secret containing SSH private key for the Windows signing host
      default: windows-ssh-key
    - name: macCredentials
      type: string
      description: Secret to interact with the Mac signing utils
    - name: macSigningCredentials
      type: string
      description: Secret to interact with the Mac signing host'
    - name: macSSHKey
      type: string
      description: Secret containing SSH private key for the Mac signing host
      default: mac-ssh-key
    - name: pipelineRunUid
      type: string
      description: Unique identifier for the pipeline run
  volumes:
    - name: windows-ssh-key-vol
      secret:
        secretName: $(params.windowsSSHKey)
    - name: mac-ssh-key-vol
      secret:
        secretName: $(params.macSSHKey)
  workspaces:
    - name: data
      description: Workspace to save the results to
  results:
    - name: unsignedMacDigest
      type: string
      description: |
        Digest used by Mac signing host to pull unsignged content via ORAS
    - name: signedMacDigest
      type: string
      description: |
        Digest used to pull signed Mac content back to pipeline via ORAS
    - name: unsignedWindowsDigest
      type: string
      description: |
        Digest used by Windows signing host to pull unsignged content via ORAS
    - name: signedWindowsDigest
      type: string
      description: |
        Digest used to pull signed Windows content back to pipeline via ORAS
  steps:
    - name: push-unsigned-using-oras
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash

        # TODO CLDX-134

        output=$(oras push "$(params.quayURL)/unsigned" .)
        windows_digest=$(echo "$output" | grep 'Digest:' | awk '{print $2}')
        echo "Digest for windows content: $windows_digest"
        echo -n "$windows_digest" > "$(results.unsignedWindowsDigest.path)"
    - name: sign-mac-binaries
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      volumeMounts:
        - name: mac-ssh-key-vol
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: MAC_USER
          valueFrom:
            secretKeyRef:
              name: $(params.macCredentials)
              key: username
        - name: MAC_HOST
          valueFrom:
            secretKeyRef:
              name: $(params.macCredentials)
              key: host
        - name: KEYCHAIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.macSigningCredentials)
              key: keychainPassword
        - name: SIGNING_IDENTITY
          valueFrom:
            secretKeyRef:
              name: $(params.macSigningCredentials)
              key: signingIdentity
        - name: APPLE_ID
          valueFrom:
            secretKeyRef:
              name: $(params.macSigningCredentials)
              key: appleId
        - name: TEAM_ID
          valueFrom:
            secretKeyRef:
              name: $(params.macSigningCredentials)
              key: teamId
        - name: APP_SPECIFIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.macSigningCredentials)
              key: appSpecificPassword
        - name: QUAY_USER
          valueFrom:
            secretKeyRef:
              name: $(params.quaySecret)
              key: username
        - name: QUAY_PASS
          valueFrom:
            secretKeyRef:
              name: $(params.quaySecret)
              key: password
      script: |
        #!/usr/bin/env bash
        set -eux
        
        #TODO: cp SSH key to the Mac host
        unsigned_digest=$(cat "$(results.unsignedMacDigest.path)")
        $mac_signing_script="/tmp/mac_signing_script.sh"
        set +x
        cat << EOF > "$mac_signing_script"
        #!/bin/bash
        set -e 
        TEMP_DIR="/tmp/$(params.pipelineRunUid)"
        BINARY_PATH="binaries_dir"
        ZIP_PATH="$TEMP_DIR/signed_content.zip"
        DIGEST_FILE="$TEMP_DIR/push_digest.txt"

        cd "$TEMP_DIR"
        oras login quay.io -u ${QUAY_USER} -p ${QUAY_PASS}
        oras pull "$(params.quayURL)@sha256:$unsigned_digest" -o "$TEMP_DIR/$BINARY_PATH"
        # This is the directory where the content was extracted
        CONTENT_DIR=$(find "$BINARY_PATH" -maxdepth 1 -type d | tail -n 1)

        security unlock-keychain -p $KEYCHAIN_PASSWORD login.keychain

        echo "Signing files in the $CONTENT_DIR directory..."
        find "$CONTENT_DIR" -type f | while read file; do
            echo "Signing: $file"
            if ! xcrun codesign --sign "Developer ID Application: $SIGNING_IDENTITY" \
                --options runtime --timestamp --force "$file"; then
                echo "Failed to sign file: $file"
                exit 1
            fi
        done

        cd "$BINARY_PATH"
        CONTENT_DIR=$(basename "$CONTENT_DIR")
        zip -r "$ZIP_PATH" "$CONTENT_DIR"

        xcrun notarytool submit "$ZIP_PATH" \
            --wait \
            --apple-id "$APPLE_ID" \
            --team-id "$TEAM_ID" \
            --password "$APP_SPECIFIC_PASSWORD"

        PUSH_OUTPUT=$(oras push "$(params.quayURL)" "$CONTENT_DIR")
        SIGNED_DIGEST=$(echo "$PUSH_OUTPUT" | grep 'Digest:' | awk '{print $2}')
        echo "$SIGNED_DIGEST" >> "$DIGEST_FILE"
        echo "Process completed successfully."
        EOF
        set -x
        # Copy the script to the Mac host
        scp -i "/etc/secrets/id_rsa" "$mac_signing_script" \
        "${MAC_USER}@${MAC_HOST}:/tmp/mac_signing_script.sh"

        # Execute the script on the Mac host
        ssh -i "/etc/secrets/id_rsa" "${MAC_USER}@${MAC_HOST}" \
        "bash /tmp/mac_signing_script.sh"

        # Copy the signed digest back to the pipeline
        scp -i "/etc/secrets/id_rsa" "${MAC_USER}@${MAC_HOST}:/tmp/$(params.pipelineRunUid)/push_digest.txt" \
        "$(results.signedMacDigest.path)"
    - name: sign-windows-binaries
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      volumeMounts:
        - name: windows-ssh-key-vol
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: WINDOWS_USER
          valueFrom:
            secretKeyRef:
              name: $(params.windowsCredentials)
              key: username
        - name: WINDOWS_PORT
          valueFrom:
            secretKeyRef:
              name: $(params.windowsCredentials)
              key: port
        - name: WINDOWS_HOST
          valueFrom:
            secretKeyRef:
              name: $(params.windowsCredentials)
              key: host
        - name: QUAY_USER
          valueFrom:
            secretKeyRef:
              name: $(params.quaySecret)
              key: username
        - name: QUAY_PASS
          valueFrom:
            secretKeyRef:
              name: $(params.quaySecret)
              key: password
      script: |
        #!/usr/bin/env bash
        set -eux

        mkdir -p /root/.ssh
        chmod 700 /root/.ssh
        cp "/etc/secrets/id_rsa" /root/.ssh/id_rsa
        cp "/etc/secrets/fingerprint" /root/.ssh/known_hosts
        chmod 600 root/.ssh/known_hosts /root/.ssh/id_rsa

        SSH_OPTS="-i /root/.ssh/id_rsa -o UserKnownHostsFile=/root/.ssh/known_hosts -p ${WINDOWS_PORT} \
        ${WINDOWS_USER}@${WINDOWS_HOST}"
        SCP_OPTS="-i /root/.ssh/id_rsa -o UserKnownHostsFile=/root/.ssh/known_hosts -P ${WINDOWS_PORT}"

        unsigned_digest=$(cat "$(results.unsignedWindowsDigest.path)")
        # Create the batch script
        signing_script_file="/tmp/signing_script.bat"
        set +x
        cat << EOF > "$signing_script_file"

        mkdir %TEMP%\$(params.pipelineRunUid) && cd /d %TEMP%\$(params.pipelineRunUid)
        @echo off
        oras login quay.io -u ${QUAY_USER} -p ${QUAY_PASS}
        @echo on
        oras pull $(params.quayURL)/unsigned@${unsigned_digest}

        signtool sign /v /n "Red Hat" /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 ^
        %TEMP%\$(params.pipelineRunUid)\*

        if errorlevel 1 (
          echo Signing of binaries failed
          exit /B %ERRORLEVEL%
        )

        signtool verify /v /pa %TEMP%\$(params.pipelineRunUid)\*

        if errorlevel 1 (
          echo Verification of binaries failed
          exit /B %ERRORLEVEL%
        )

        echo [%DATE% %TIME%] Signing of Windows binaries completed successfully

        oras push $(params.quayURL)/signed:$(params.pipelineRunUid) %TEMP%\$(params.pipelineRunUid) \
        > oras_push_output.txt 2>&1

        for /f "tokens=2,3 delims=: " %%a in ('findstr "Digest:" oras_push_output.txt') do @echo %%a:%%b > digest.txt
        EOF
        set -x
        scp "$SCP_OPTS" "$signing_script_file" \
        "${WINDOWS_USER}@${WINDOWS_HOST}:C:/Users/Administrator/AppData/Local/Temp/signing_script.bat"

        # Execute the script on the Windows host
        ssh "$SSH_OPTS" "C:/Users/Administrator/AppData/Local/Temp/signing_script.bat"

        # disable shellcheck for escaping the pipelineRunUid as we want that evaluated on client side
        # shellcheck disable=SC2029

        scp "$SCP_OPTS" "${WINDOWS_USER}@${WINDOWS_HOST}:\
        C:\\Users\\Administrator\\AppData\\Local\\Temp\\$(params.pipelineRunUid)\\digest.txt" \
        "$(results.signedWindowsDigest.path)"

        # Clean up the windows host now that we are done
        # shellcheck disable=SC2029
        ssh "$SSH_OPTS" "rmdir /s /q C:\\Users\\Administrator\\AppData\\Local\\Temp\\$(params.pipelineRunUid)"

    # - name: pull-signed-using-oras
    #   image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
    #   script: |
    #     #!/usr/bin/env bash
    #     # TODO CLDX-79
    # - name: generate-checksums
    #   image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
    #   script: |
    #     #!/usr/bin/env bash
    #     # TODO CLDX-82
