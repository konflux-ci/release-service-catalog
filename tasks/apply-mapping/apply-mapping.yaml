---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: apply-mapping
  labels:
    app.kubernetes.io/version: "1.6.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to apply a mapping to a Snapshot. It will override the Snapshot file.
  params:
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the config workspace to apply the mapping to
    - name: dataPath
      type: string
      description: Path to the JSON string of the merged data to use in the data workspace
    - name: failOnEmptyResult
      type: string
      description: Fail the task if the resulting snapshot contains 0 components
      default: "false"
  workspaces:
    - name: config
      description: The workspace where the extra config file containing the mapping and snapshot json reside
  results:
    - name: mapped
      type: string
      description: A true/false value depicting whether or not the snapshot was mapped.
  steps:
    - name: apply-mapping
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eux

        SNAPSHOT_SPEC_FILE="$(workspaces.config.path)/$(params.snapshotPath)"
        DATA_FILE="$(workspaces.config.path)/$(params.dataPath)"
        SNAPSHOT_SPEC_FILE_ORIG="${SNAPSHOT_SPEC_FILE}.orig"

        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was found."
            exit 1
        fi

        # Copy the original Snapshot spec file before overriding
        cp "${SNAPSHOT_SPEC_FILE}" "${SNAPSHOT_SPEC_FILE_ORIG}"

        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON file was found."
            printf "false" | tee "$(results.mapped.path)"
            exit 0
        fi

        MAPPING=$(jq '.mapping' "${DATA_FILE}")

        if [[ $MAPPING == "null" ]] ; then
            echo "Data file contains no mapping key."
            printf "false" | tee "$(results.mapped.path)"
            exit 0
        fi

        # Expected arguments are [tags, timestamp, release_timestamp, git sha, 7 character git sha, source sha]
        translate_tags () {
        # The tags argument is a json array
            if [[ $1 == '' ]] ; then
                echo ''
                return
            fi

            SUPPORTED_VARIABLES='[
                {"{{timestamp}}": "'$2'"},
                {"{{ timestamp }}": "'$2'"},
                {"{{release_timestamp}}": "'$3'"},
                {"{{ release_timestamp }}": "'$3'"},
                {"{{git_sha}}": "'$4'"},
                {"{{ git_sha }}": "'$4'"},
                {"{{git_short_sha}}": "'$5'"},
                {"{{ git_short_sha }}": "'$5'"},
                {"{{digest_sha}}": "'$6'"},
                {"{{ digest_sha }}": "'$6'"}
            ]'
            tags=$1

            NUM_VARIABLES=$(jq 'length' <<< "${SUPPORTED_VARIABLES}")
            for ((i = 0; i < NUM_VARIABLES; i++)); do
                variable=$(jq -c --argjson i "$i" '.[$i]' <<< "${SUPPORTED_VARIABLES}")
                KEY=$(jq -r 'to_entries[] | .key' <<< "$variable")
                VALUE=$(jq -r 'to_entries[] | .value' <<< "$variable")
                # If a tag is going to be replaced by a null value, error out
                if [[ "$VALUE" == "null" ]] && \
                  [[ $(jq --arg key "$KEY" '. | map(select(test($key))) | length' <<< "$tags") -gt 0 ]] ; then
                    echo "Requested substitution for key: $KEY but calculated value for it was null"
                    echo "Failing..."
                    exit 1
                fi
                tags=$(echo -n "$tags" | sed "s/$KEY/$VALUE/g")
            done

            echo -n "$tags" | jq -c
        }

        convert_to_quay () { # Convert the registry.redhat.io URL to the quay.io format
            local repository=$1
            case "$repository" in
                registry.redhat.io/*)
                    echo "${repository/registry.redhat.io/quay.io/redhat-prod}" \
                        | sed 's|/|----|g; s|quay.io----redhat-prod----|quay.io/redhat-prod/|'
                    ;;
                registry.stage.redhat.io/*)
                    echo "${repository/registry.stage.redhat.io/quay.io/redhat-pending}" \
                        | sed 's|/|----|g; s|quay.io----redhat-pending----|quay.io/redhat-pending/|'
                    ;;
                *)
                    echo "$repository"
                    ;;
            esac
        }

        # This block is temporary to support both quay.io and registry.redhat.io
        # It should be removed once all repositories are migrated to registry.redhat.io
        convert_to_registry () { # Convert the repository URL to the registry.redhat.io format
            local repository=$1
            case "$repository" in
                quay.io/redhat-prod/*)
                    repository="${repository//quay.io\/redhat-prod/registry.redhat.io}"
                    repository="${repository//----//}"
                    echo "$repository"
                    ;;
                quay.io/redhat-pending/*)
                    repository="${repository//quay.io\/redhat-pending/registry.stage.redhat.io}"
                    repository="${repository//----//}"
                    echo "$repository"
                    ;;
                registry.redhat.io/* | registry.stage.redhat.io/*)
                    # Return the original Red Hat registry paths
                    echo "$repository"
                    ;;
                *)
                    # Return empty for unhandled formats
                    echo ""
                    ;;
            esac
        }

        convert_to_registry_access () { # Convert the repository URL to the registry.access.redhat.com format
            local repository=$1
            case "$repository" in
                registry.redhat.io/*)
                    echo "${repository/registry.redhat.io/registry.access.redhat.com}"
                    ;;
                registry.stage.redhat.io/*)
                    echo "${repository/registry.stage.redhat.io/registry.access.stage.redhat.com}"
                    ;;
                *)
                    echo ""
                    ;;
            esac
        }

        # Merge the mapping key contents in the data JSON file with the components key in the snapshot based
        # on component name. Save the output as a compact JSON in the mapped_snapshot.json file in the workspace
        { echo -n "$(cat "${SNAPSHOT_SPEC_FILE_ORIG}")"; echo "${MAPPING}"; } | jq -c -s '
          .[0] as $snapshot | .[0].components + .[1].components | group_by(.name) |
          [.[] | select(length > 1)] | map(reduce .[] as $x ({}; . * $x)) as $mergedComponents |
          $snapshot | .components = $mergedComponents' > "${SNAPSHOT_SPEC_FILE}"

        printf "true" | tee "$(results.mapped.path)"

        if [ "$(params.failOnEmptyResult)" = "true" ] && \
          [ "$(jq '.components | length' < "${SNAPSHOT_SPEC_FILE}")" -eq 0 ]; then
          echo "ERROR: Resulting snapshot contains 0 components"
          exit 1
        fi

        # Expand the tags in the data file
        defaultTags=$(jq '.defaults.tags // []' <<< "$MAPPING")
        defaultTimestampFormat=$(jq -r '.defaults.timestampFormat // "%s"' <<< "$MAPPING")
        currentTimestamp="$(date "+%Y%m%d %T")"
        NUM_MAPPED_COMPONENTS=$(jq '.components | length' "${SNAPSHOT_SPEC_FILE}")
        for ((i = 0; i < NUM_MAPPED_COMPONENTS; i++)) ; do
            component=$(jq -c --argjson i "$i" '.components[$i]' "${SNAPSHOT_SPEC_FILE}")

            # images are required to use sha reference - check this
            NAME=$(jq -r '.name' <<< "$component")
            IMAGE_REF=$(jq -r '.containerImage' <<< "$component")
            if ! [[ "$IMAGE_REF" =~ ^[^:]+@sha256:[0-9a-f]+$ ]] ; then
              echo "Component ${NAME} contains an invalid containerImage value. sha reference is required: ${IMAGE_REF}"
              exit 1
            fi

            imageTags=$(jq '.tags // []' <<< "$component")
            git_sha=$(jq -r '.source.git.revision' <<< "$component") # this sets the value to "null" if it doesn't exist
            build_sha=$(echo "$IMAGE_REF" | cut -d ':' -f 2)
            passedTimestampFormat=$(jq -r --arg default "$defaultTimestampFormat" \
              '.timestampFormat // $default' <<< "$component")
            release_timestamp="$(date -d "$currentTimestamp" "+$passedTimestampFormat")"
            arch_json="$(get-image-architectures "${IMAGE_REF}")"
            # The build-date label is not the same per architecture, but we don't support separate tags per arch. So,
            # we just use the first digest listed
            arch="$(jq -rs 'map(.platform.architecture) | .[0]' <<< "$arch_json")"
            os="$(jq -rs 'map(.platform.os) | .[0]' <<< "$arch_json")"
            build_date="$(skopeo inspect --no-tags --override-os "${os}" --override-arch "${arch}" \
              docker://"${IMAGE_REF}" | jq -r '.Labels."build-date"')"
            timestamp="$(date -d "${build_date}" "+$passedTimestampFormat")"
            if [ "${build_date}" == "null" ] ; then
              timestamp="null"
            fi

            allTagsPreSubstitution=$(jq -n --argjson defaults "$defaultTags" --argjson imageTags \
              "$imageTags" '$defaults? + $imageTags? | unique')
            tags=$(translate_tags "${allTagsPreSubstitution}" "${timestamp}" "${release_timestamp}" "${git_sha}" \
              "${git_sha:0:7}" "${build_sha}")
            if [ "$(jq 'length' <<< "$tags")" -gt 0 ] ; then
              jq --argjson i "$i" --argjson updatedTags "$tags" '.components[$i].tags = $updatedTags' \
                "${SNAPSHOT_SPEC_FILE}" > /tmp/temp && mv /tmp/temp "${SNAPSHOT_SPEC_FILE}"
            fi

            # Also substitute filename values in the staged section of components
            STAGED_FILES=$(jq '.staged.files | length' <<< "$component")
            for ((j = 0; j < STAGED_FILES; j++)) ; do
                file=$(jq -c --argjson j "$j" '.staged.files[$j]' <<< "$component")
                filenameArrayPreSubstitution=$(jq '.filename' <<< "$file" | jq -cs)
                subbedFilename=$(translate_tags "${filenameArrayPreSubstitution}" "${timestamp}" \
                  "${release_timestamp}" "${git_sha}" "${git_sha:0:7}" "${build_sha}" | jq -r '.[0]')
                jq --argjson i "$i" --argjson j "$j" --arg filename "$subbedFilename" \
                  '.components[$i].staged.files[$j].filename = $filename' "${SNAPSHOT_SPEC_FILE}" > /tmp/temp \
                  && mv /tmp/temp "${SNAPSHOT_SPEC_FILE}"
            done

            # Determine the format of the original repository and update keys accordingly
            repository=$(jq -r '.repository' <<< "$component")
            echo "Processing component: $NAME"
            echo "Original repository: $repository"

            # This block is temporary to support both quay.io and registry.redhat.io
            # It should be removed once all repositories are migrated to registry.redhat.io
            if [[ "$repository" == quay.io/redhat-prod/* || "$repository" == quay.io/redhat-pending/* ]]; then
                repository=$(convert_to_registry "$repository")
            fi

            # Convert to registry and quay format
            if [[ "$repository" == registry.redhat.io/* || "$repository" == registry.stage.redhat.io/* ]]; then
              rh_registry_repo=$repository
              registry_access_repo=$(convert_to_registry_access "$repository")
              repository=$(convert_to_quay "$repository")
      
              jq --argjson i "$i" \
                --arg repository "$repository" \
                --arg rh_registry_repo "$rh_registry_repo" \
                --arg registry_access_repo "$registry_access_repo" \
                '(.components[$i].repository = $repository) |
                    .components[$i]["rh-registry-repo"] = $rh_registry_repo |
                    .components[$i]["registry-access-repo"] = $registry_access_repo' \
              "${SNAPSHOT_SPEC_FILE}" > /tmp/temp && mv /tmp/temp "${SNAPSHOT_SPEC_FILE}"
            fi
        done
