---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-mrrc-params
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  params:
    - name: dataJsonPath
      type: string
      description: path to data json file
    - name: snapshotPath
      description: Path to the JSON string of the Snapshot spec in the data workspace
      type: string
  results:
    - name: mrrcParamFilePath
      description: path of the env file for other tasks to consume
    - name: charonConfigFilePath
      description: path of the charon config file for other tasks to consume
    - name: charonAWSSecret
      description: the secret name for charon aws credential file
  steps:
    - name: collect-mrrc-params
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eux

        WORK_DIR=$(workspaces.data.path)
        cd $WORK_DIR

        DATA_FILE="$WORK_DIR/$(params.dataJsonPath)"
        MRRC_ENV_FILE_PATH="$(dirname $(params.dataJsonPath))/mrrc.env"

        environment="$(jq -re '.mrrc.environment' "$DATA_FILE")"
        release="$(jq -re '.mrrc.release' "$DATA_FILE")"
        target="$environment-maven-$release"
        echo "export MRRC_TARGET=$target" >> "$MRRC_ENV_FILE_PATH"

        productName="$(jq -re '.releaseNotes.product_name' "$DATA_FILE")"
        productVersion="$(jq -re '.releaseNotes.product_version' "$DATA_FILE")"
        echo "export MRRC_PRODUCT_NAME=$productName" >> "$MRRC_ENV_FILE_PATH"
        echo "export MRRC_PRODUCT_VERSION=$productVersion" >> "$MRRC_ENV_FILE_PATH"

        SNAPSHOT_PATH="$WORK_DIR/$(params.snapshotPath)"
        zipRegistries="$(jq -re '[.components[].containerImage] | join("%")' "$SNAPSHOT_PATH")"
        echo "export MRRC_ZIP_REGISTRY=$zipRegistries" >> "$MRRC_ENV_FILE_PATH"

        awsSecret="$(jq -re '.mrrc.awsSecret' $DATA_FILE)"
        echo -n "$awsSecret" > "$(results.charonAWSSecret.path)"

        echo -n "$MRRC_ENV_FILE_PATH" > "$(results.mrrcParamFilePath.path)"

        CHARON_CFG_FILE_PATH="$(dirname "$(params.dataJsonPath)")/charon-config.yaml"
        jq -re '.mrrc.charonConfig' "$DATA_FILE" > "$CHARON_CFG_FILE_PATH"
        echo -n "$CHARON_CFG_FILE_PATH" > "$(results.charonConfigFilePath.path)"
  workspaces:
    - name: data
