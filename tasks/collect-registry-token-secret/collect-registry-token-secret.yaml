---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-registry-token-secret
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that collects secret name containing registry token from the data file
  params:
    - name: dataPath
      type: string
      description: Path to the merged data JSON file generated by collect-data task
  workspaces:
    - name: data
      description: The workspace where the data json file resides
  results:
    - name: registrySecret
      type: string
      description: "The kube secret to use quay.io API, containing one key: token"
  steps:
    - name: collect-secret
      image:
        quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
      script: |
        #!/usr/bin/env bash
        set -eux

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        # Check if there is anything to make public - either in defaults, or a component
        SECRET_REQUIRED=false
        if [ "$(jq -r '.mapping.defaults.public // false' "$DATA_FILE")" = true ] ; then
          SECRET_REQUIRED=true
        else
          NUM_COMPONENTS=$(jq '.mapping.components | length' "$DATA_FILE")
          for ((i=0; i < NUM_COMPONENTS; i++)); do
            COMPONENT=$(jq -c ".mapping.components[$i]" "$DATA_FILE")
            if [ "$(jq -r '.public // false' <<< "$COMPONENT")" = true ] ; then
              SECRET_REQUIRED=true
              break
            fi
          done
        fi

        if [ "$SECRET_REQUIRED" = false ]; then
          echo No repos to make public, so no secret is required. Exiting...
          echo -n "" > "$(results.registrySecret.path)"
          exit 0
        fi

        if [ "$(jq '.mapping | has("registrySecret")' "$DATA_FILE")" == false ] ; then
            echo "Registry secret missing in data JSON file"
            exit 1
        fi

        jq -j '.mapping.registrySecret' "$DATA_FILE" | tee "$(results.registrySecret.path)"
