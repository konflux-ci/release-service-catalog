---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-image-cosign
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to sign container images in snapshot by cosign
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: secretName
      description: Name of secret containing needed credentials
      type: string
    - name: signRegistryAccessPath
      type: string
      description: |
        The relative path in the workspace to a text file that contains a list of repositories
        that needs registry.access.redhat.com image references to be signed (i.e.
        requires_terms=true), one repository string per line, e.g. "rhtas/cosign-rhel9".
  workspaces:
    - name: data
      description: Workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_DEFAULT_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_SECRET_ACCESS_KEY
        - name: SIGN_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: SIGN_KEY
        - name: REKOR_URL
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: REKOR_URL
              optional: true
      script: |
        #!/usr/bin/env bash
        set -eux

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        COMPONENTS_LENGTH=$(jq '.components |length' "${SNAPSHOT_PATH}")

        SIGN_REGISTRY_ACCESS_FILE=$(workspaces.data.path)/$(params.signRegistryAccessPath)
        if [ ! -f "${SIGN_REGISTRY_ACCESS_FILE}" ] ; then
            echo "No valid file was provided as signRegistryAccessPath."
            exit 1
        fi

        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do
            COMPONENT_NAME=$(jq -r ".components[${COMPONENTS_INDEX}].name" "${SNAPSHOT_PATH}")
            echo "Processing component ${COMPONENT_NAME}"

            # Get public image references
            INTERNAL_CONTAINER_REF=$(jq -r ".components[${COMPONENTS_INDEX}].repository" "${SNAPSHOT_PATH}")
            rh_registry_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"rh-registry-repo\"]" "${SNAPSHOT_PATH}")
            registry_access_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"registry-access-repo\"]" \
              "${SNAPSHOT_PATH}")
            repository="${rh_registry_repo#*/}"

            # Sign rh-registry-repo references (always) and registry-access-repo references
            # (only if signatures for this registry are required)
            REGISTRY_REFERENCES=("${rh_registry_repo}")
            if grep -q "^${repository}$" "${SIGN_REGISTRY_ACCESS_FILE}"; then
              REGISTRY_REFERENCES+=("${registry_access_repo}")
            fi

            # Check if image is manifest list
            BUILD_CONTAINER_IMAGE=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" "${SNAPSHOT_PATH}")
            DIGEST="${BUILD_CONTAINER_IMAGE/*@}"
            IMAGE=$(skopeo inspect --raw "docker://${BUILD_CONTAINER_IMAGE}")
            MEDIA_TYPE=$(echo "$IMAGE" | jq -r '.mediaType')
            TAGS=$(jq -r ".components[${COMPONENTS_INDEX}].tags|.[]" "${SNAPSHOT_PATH}")
            LIST=0
            if [ "$MEDIA_TYPE" = "application/vnd.docker.distribution.manifest.list.v2+json" ]; then LIST=1; fi
            if [ "$MEDIA_TYPE" = "application/vnd.oci.image.index.v1+json" ]; then LIST=1; fi

            # Upload transparency log when rekor url is specified
            if [ -v REKOR_URL ]; then
                COSIGN_COMMON_ARGS="-y --rekor-url=$REKOR_URL --key $SIGN_KEY"
            else
                COSIGN_COMMON_ARGS="--tlog-upload=false --key $SIGN_KEY"
            fi

            # Sign each manifest in manifest list
            if [ $LIST -eq 1 ]; then
                for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                    for MDIGEST in $(echo "$IMAGE" | jq -r '.manifests[]|.digest'); do
                        for TAG in $TAGS; do
                            echo "Signing manifest ${INTERNAL_CONTAINER_REF}:${TAG} (${MDIGEST})"
                            cosign -t 3m0s sign\
                            ${COSIGN_COMMON_ARGS}\
                            --sign-container-identity "${REGISTRY_REF}:${TAG}"\
                            "${INTERNAL_CONTAINER_REF}@${MDIGEST}"
                        done
                    done
                done
            fi

            # Sign manifest list itself or manifest if it's not list
            for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                for TAG in $TAGS; do
                    echo "Signing manifest ${INTERNAL_CONTAINER_REF}:${TAG} (${DIGEST})"
                    cosign -t 3m0s sign\
                    ${COSIGN_COMMON_ARGS}\
                    --sign-container-identity "${REGISTRY_REF}:${TAG}"\
                    "${INTERNAL_CONTAINER_REF}@${DIGEST}"
                done
            done
        done
        echo "done"
