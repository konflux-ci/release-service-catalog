---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-cosign-image
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to sign container images in a Snapshot spec using the cosign.
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: secretName
      description: Name of secret containing needed credentials 
      type: string
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      env:
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_SECRET_ACCESS_KEY
      script: |
        #!/usr/bin/env bash
        set -eu
        function fetch_cosign_key() {
          echo $(kubectl_get_arg_from_config_map $1 SIG_KEY)
        } 

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        request=$(jq -r '.sign.request // "hacbs-signing-pipeline"' ${DATA_FILE})
        CONFIG_MAP_NAME=$(jq -rc '.sign.configMapName // "signing-config-map"' ${DATA_FILE})

        COMPONENTS_LENGTH=$(jq '.components |length' ${SNAPSHOT_PATH})

        COSIGN_SIG_KEY=$(fetch_cosign_key $CONFIG_MAP_NAME)

        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do
            INTERNAL_CONTAINER_IMAGE=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" ${SNAPSHOT_PATH})
            INTERNAL_CONTAINER_REF="${INTERNAL_CONTAINER_IMAGE/@*}"
            DIGEST="${INTERNAL_CONTAINER_IMAGE/*@}"

            PUB_CONTAINER_REF=$(jq -r ".components[${COMPONENTS_INDEX}].repository" ${SNAPSHOT_PATH})
            PUB_CONTAINER_IMAGE="${PUB_CONTAINER_REF}@${DIGEST}"

            COSIGN_PRE_ARGS="AWS_REGION=${AWS_REGION} AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
            COSIGN_COMMON_ARGS="--key ${COSIGN_SIG_KEY}"

            IMAGE=$(skopeo inspect --raw "docker://${INTERNAL_CONTAINER_IMAGE}")
            MEDIA_TYPE=$(echo "$IMAGE" | jq -r '.mediaType')
            LIST=0
            if [ "$MEDIA_TYPE" = "application/vnd.docker.distribution.manifest.list.v2+json" ]; then LIST=1; fi
            if [ "$MEDIA_TYPE" = "application/vnd.oci.image.index.v1+json" ]; then LIST=1; fi

            # if manifest list, sign each manifest + ml itself
            if [ $LIST -eq 1 ]; then
              PUB_REPO_REF="${PUB_CONTAINER_REF}@${DIGEST}"
              for MDIGEST in $(echo "$IMAGE" | jq -rc '.manifests[]|.digest'); do
                cosign ${COSIGN_PRE_ARGS} cosign -t 3m0s sign\
                  ${COSIGN_COMMON_ARGS}\
                  --sign-container-identity "${PUB_CONTAINER_REF}@${MDIGEST}"\
                  "${INTERNAL_CONTAINER_REF}@${MDIGEST}"
              done
            fi
              # if sign ml itself or just manifest (if it's not list)
              cosign ${COSIGN_PRE_ARGS} cosign -t 3m0s sign\
                ${COSIGN_COMMON_ARGS}\
                --sign-container-identity "${PUB_CONTAINER_REF}@${DIGEST}"\
                "${INTERNAL_CONTAINER_REF}@${DIGEST}"
            echo "done"
        done
