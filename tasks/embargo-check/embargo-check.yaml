---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: embargo-check
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to check if any issues or CVEs in the releaseNotes key of the data.json
    are embargoed. It checks the issues by server using curl and checks the CVEs via an
    InternalRequest. If any issue or CVE is embargoed, the task will fail.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: "data.json"
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  steps:
    - name: check-issues
      image: quay.io/redhat-appstudio/release-service-utils:c6989496ce3326ae2556bd5afb992da13e94d3ea
      script: |
        #!/usr/bin/env bash
        set -x

        SUPPORTED_ISSUE_TRACKERS='{
            "Jira": {
                "api": "rest/api/2/issue",
                "servers": [
                    "issues.redhat.com",
                    "jira.atlassian.com"
                ]
            },
            "bugzilla": {
                "api": "rest/bug",
                "servers": [
                    "bugzilla.redhat.com"
                ]
            }
        }'

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        RC=0

        for issue in $(jq -cr '.releaseNotes.issues.fixed[]?' "${DATA_FILE}") ; do
            server=$(jq -r '.source' <<< $issue)
            API=$(jq -r '.[] | select(.servers[] | contains("'$server'")) | .api' <<< $SUPPORTED_ISSUE_TRACKERS)
            API_URL="https://$(jq -r '.source' <<< $issue)/${API}/$(jq -r '.id' <<< $issue)"
            curl --fail --output /dev/null ${API_URL}
            if [ $? -ne 0 ] ; then
                echo "${issue} is not publicly visible. Assuming it is embargoed and stopping pipelineRun execution."
                RC=1
            fi
        done

        exit $RC
    - name: check-cves
      image: quay.io/redhat-appstudio/release-service-utils:c6989496ce3326ae2556bd5afb992da13e94d3ea
      script: |
        #!/usr/bin/env bash

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        CVES=$(jq -r '.releaseNotes.content.images[].cves.fixed
            | to_entries[] | .key' "${DATA_FILE}" | sort -u | tr "\n" " ")

        if [[ ${CVES} == "" ]] ; then
            echo "No CVEs found to check"
            exit 0
        fi

        echo "Checking the following CVEs: ${CVES}"

        internal-request -r "check-embargoed-cves" \
            -p cves="${CVES}" \
            -l ${PIPELINERUN_LABEL}=$(params.pipelineRunUid) \
            -t $(params.requestTimeout) \
            -s true \
            > $(workspaces.data.path)/ir-result.txt || \
            (grep "^\[" $(workspaces.data.path)/ir-result.txt | jq . && exit 1)
        
        internalRequest=$(awk 'NR==1{ print $2 }' $(workspaces.data.path)/ir-result.txt | xargs)
        echo "done (${internalRequest})"

        results=$(kubectl get internalrequest $internalRequest -o=jsonpath='{.status.results}')
        if [[ "$(echo ${results} | jq -r '.result')" == "Success" ]]; then
          echo "No embargoed CVEs found"
        else
          echo "The following CVEs are marked as embargoed:"
          echo "$(echo ${results} | jq -cr '.embargoed_cves')"
          exit 1
        fi
