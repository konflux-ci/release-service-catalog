---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-sbom-to-pyxis
  labels:
    app.kubernetes.io/version: "0.5.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that extracts sboms from pull specs and pushes them to Pyxis.
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in hte data workspace
      type: string
      default: mapped_snapshot.json
    - name: containerImageIDs
      description: Space separated list of Pyxis image IDs
      type: string
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: server
      type: string
      description: The server type to use. Options are 'production' and 'stage'
      default: production
    - name: concurrentLimit
      type: string
      description: The maximum number of images to be processed at once
      default: 4
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  volumes:
    - name: workdir
      emptyDir: {}
  steps:
    - name: download-sbom-files
      image:
        quay.io/redhat-appstudio/release-service-utils:4d00a5731e96e341e0104ad2374792b985330c87
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env sh
        set -eux

        SNAPSHOT_SPEC_FILE="$(workspaces.data.path)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        IMAGEURLS=($(cat "${SNAPSHOT_SPEC_FILE}" | jq -r '.components[].containerImage'))
        IMAGEIDS=($(params.containerImageIDs))

        if [ ${#IMAGEURLS[@]} != ${#IMAGEIDS[@]} ]; then
          echo "ERROR: Lengths of imageURLs and containerImageIDs do not match"
          exit 1
        fi

        mkdir /workdir/sboms
        cd /workdir/sboms

        for i in ${!IMAGEURLS[@]}; do
          echo "Fetching sbom for image: ${IMAGEURLS[$i]}"
          cosign download sbom --output-file "${IMAGEIDS[$i]}.json" "${IMAGEURLS[$i]}"
        done

        SBOM_COUNT=$(ls *.json | wc -l )
        if [ $SBOM_COUNT != ${#IMAGEURLS[@]} ]; then
          echo "ERROR: Expected to fetch sbom for ${#IMAGEURLS[@]} images, but only $SBOM_COUNT were saved"
          exit 1
        fi

    - name: push-sbom-files-to-pyxis
      image:
        quay.io/redhat-appstudio/release-service-utils:4d00a5731e96e341e0104ad2374792b985330c87
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env sh
        set -eu

        if [[ "$(params.server)" == "production" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.api.redhat.com/graphql/"
        elif [[ "$(params.server)" == "stage" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.preprod.api.redhat.com/graphql/"
        else
          echo "Invalid server parameter. Only 'production' and 'stage' are allowed."
          exit 1
        fi

        export PYXIS_CERT_PATH=/workdir/crt
        export PYXIS_KEY_PATH=/workdir/key
        echo "${pyxisCert}" > $PYXIS_CERT_PATH
        echo "${pyxisKey}" > $PYXIS_KEY_PATH

        cd /workdir/sboms

        N=$(params.concurrentLimit)  # The maximum number of images to be processed at once
        declare -a jobs=()
        declare -a files=()
        total=$(ls *.json | wc -l )
        count=0
        success=true
        echo "Starting sbom upload for $total files in total. " \
          "Up to $N files will be uploaded at once..."

        for FILE in *.json; do
          echo Uploading sbom to Pyxis: $FILE
          upload_sbom --retry --sbom-path $FILE > ${FILE}.out 2>&1 &

          jobs+=($!)  # Save the background process ID
          files+=($FILE)
          ((++count))

          if [ $((count%N)) -eq 0 -o $((count)) -eq $total ]; then
            echo Waiting for the current batch of background processes to finish
            for i in "${!jobs[@]}"; do
              if ! wait ${jobs[i]}; then
                echo "Error: upload of ${files[i]} failed"
                success=false
              fi
            done

            echo
            echo Printing outputs for current upload_sbom script runs
            for FILE in ${files[@]}; do
              echo "=== $FILE ==="
              cat "${FILE}.out"
              echo
            done

            if [ $success != "true" ]; then
              echo ERROR: At least one upload in the last batch failed
              exit 1
            fi

            # Reset job and files arrays for the next batch
            jobs=()
            files=()
          fi
        done
