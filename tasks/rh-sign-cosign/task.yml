# This file was generated by command:
#/home/jluza/github/jluza/pytractions/pytractions/cli.py generate_tekton_task signtractions.tractors.t_sign_snapshot:SignSnapshot quay.io/jluza/signtractions:latest
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: release
  labels:
    app.kubernetes.io/version: 1.0.0
  name: sign-snapshot
spec:
  description: |2

        Sign containers in release snapshot.
  params:
  - description: |-
      DESCRIPTION: 'Signer wrapper used to sign container images.'

      TYPE: Res[Union[MsgSignerWrapper,FakeCosignSignerWrapper,CosignSignerWrapper]](
          r: Union[MsgSignerWrapper(
              label: str,
              pre_push: bool,
              config_file: Optional[str],
              settings: MsgSignerSettings(
                  pyxis_server: str,
                  pyxis_ssl_crt_file: Optional[str],
                  pyxis_ssl_key_file: Optional[str],
                  num_thread_pyxis: int
              ),
              signing_chunk_size: int,
              MAX_MANIFEST_DIGESTS_PER_SEARCH_REQUEST: int
          ), CosignSignerWrapper(
              label: str,
              pre_push: bool,
              config_file: Optional[str],
              settings: SignerWrapperSettings(

              ),
              signing_chunk_size: int
          ), FakeCosignSignerWrapper(
              label: str,
              pre_push: bool,
              config_file: Optional[str],
              settings: SignerWrapperSettings(

              ),
              signing_chunk_size: int,
              entry_point_requests: List[FakeEPRunArgs(
                  args: List[str],
                  kwargs: Dict[str,Union[str, List[str], ]]
              )],
              entry_point_returns: List[Dict[str,Dict[str,str]]],
              entry_point_runs: List[FakeEPRunArgs(
                  args: List[str],
                  kwargs: Dict[str,Union[str, List[str], ]]
              )]
          ), ]
      )
    name: r_signer_wrapper_cosign
    type: string
  - description: |-
      DESCRIPTION: 'Quay client used for fetching container images when populating digests in SignEntries.'

      TYPE: Res[Union[QuayClient,FakeQuayClient]](
          r: Union[QuayClient(
              username: str,
              password: str,
              host: str
          ), FakeQuayClient(
              username: str,
              password: str,
              host: str,
              manifests: Dict[str,Dict[str,str]]
          ), ]
      )
    name: r_dst_quay_client
    type: string
  - description: |-
      DESCRIPTION: 'Json representation of release snapshot.'

      TYPE: In[str](
          data: Optional[str]
      )
    name: i_snapshot_str
    type: string
  - description: |-
      DESCRIPTION: 'Path to a file containing snapshot in json format.'

      TYPE: In[str](
          data: Optional[str]
      )
    name: i_snapshot_file
    type: string
  - description: |-
      DESCRIPTION: 'Signing key used to sign containers. One key per container.'

      TYPE: In[str](
          data: Optional[str]
      )
    name: i_signing_key
    type: string
  - description: |-
      DESCRIPTION: 'Task ID to identify signing request.'

      TYPE: In[int](
          data: Optional[int]
      )
    name: i_task_id
    type: string
  - description: |-
      DESCRIPTION: 'Pool size used for STMD tractions'

      TYPE: Arg[int](
          a: int
      )
    name: a_pool_size
    type: string
  - description: |-
      DESCRIPTION: ''

      TYPE: Arg[STMDExecutorType](
          a: STMDExecutorType
      )
    name: a_executor_type
    type: string
  steps:
  - image: quay.io/jluza/signtractions:latest
    name: run
    script: |
      #!/usr/bin/bash --posix
      cat <<EOF |
      data: |-
        $(params["r_signer_wrapper_cosign"])
      name: r_signer_wrapper_cosign
      ---
      data: |-
        $(params["r_dst_quay_client"])
      name: r_dst_quay_client
      ---
      data: |-
        $(params["i_snapshot_str"])
      name: i_snapshot_str
      ---
      data: |-
        $(params["i_snapshot_file"])
      name: i_snapshot_file
      ---
      data: |-
        $(params["i_signing_key"])
      name: i_signing_key
      ---
      data: |-
        $(params["i_task_id"])
      name: i_task_id
      ---
      data: |-
        $(params["a_pool_size"])
      name: a_pool_size
      ---
      data: |-
        $(params["a_executor_type"])
      name: a_executor_type



      EOF
      python -m pytractions.container_runner run --store-output state=$(workspaces.outputs.path)/root::state --store-output stats=$(workspaces.outputs.path)/root::stats --store-output o_sign_entries=$(workspaces.outputs.path)/root::o_sign_entries\
          "signtractions.tractors.t_sign_snapshot:SignSnapshot"
      echo "# Run stats:"
      cat $(workspaces.outputs.path)/root::stats
      echo "# Run state:"
      cat $(workspaces.outputs.path)/root::state
      export result=$(cat $(workspaces.outputs.path)/root::state |python -c "import yaml; import sys; print(yaml.safe_load(sys.stdin)['data'])")
      [ "$result" = "finished" ] || exit 1
    workingDir: /
  workspaces:
  - name: outputs

