---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-rh-sign-cosign-ml-success
spec:
  description: Test a scenario for successfull snapshot signing
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: outputs
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: outputs
        steps:
          - name: setup-values
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > $(workspaces.outputs.path)/fake_entry_point_requests.json << EOF
              [{
                "args": [],
                "kwargs": {
                  "config_file": "/workspace/outputs/pubtools-sign.conf",
                  "digest": [
                    "sha256:2e8f38a0a8d2a450598430fa70c7f0b53aeec991e76c3e29c63add599b4ef7ee",
                    "sha256:b3f9218fb5839763e62e52ee6567fe331aa1f3c644f9b6f232ff23959257acf9",
                    "sha256:496fb0ff2057c79254c9dc6ba999608a98219c5c93142569a547277c679e532c",
                    "sha256:146ab6fa7ba3ab4d154b09c1c5522e4966ecd071bf23d1ba3df6c8b9fc33f8cb",
                    "sha256:bbef1f46572d1f33a92b53b0ba0ed5a1d09dab7ffe64be1ae3ae66e76275eabd",
                    "sha256:60a4fb585b737b48b0e17caf6550974be2ac134eacee8622b35ae116b3503ed6"
                  ],
                  "signing_key": "test_sig_key"
                }
              }]
              EOF
              cat $(workspaces.outputs.path)/fake_entry_point_requests.json
              cat > $(workspaces.outputs.path)/fake_entry_point_returns.json << EOF
              [{"signer_result": {"status": "ok"}}]
              EOF
              cat > $(workspaces.outputs.path)/fake_manifests.json << EOF
              {
                "registry.io/image0@sha256:0000": {
                  "application/vnd.docker.distribution.manifest.list.v2+json": "{\"schemaVersion\":2,\"mediaType\":\"application/vnd.docker.distribution.manifest.list.v2+json\",\"manifests\":[{\"mediaType\":\"application/vnd.docker.distribution.manifest.v2+json\",\"size\":949,\"digest\":\"sha256:2e8f38a0a8d2a450598430fa70c7f0b53aeec991e76c3e29c63add599b4ef7ee\",\"platform\":{\"architecture\":\"amd64\",\"os\":\"linux\"}},{\"mediaType\":\"application/vnd.docker.distribution.manifest.v2+json\",\"size\":949,\"digest\":\"sha256:b3f9218fb5839763e62e52ee6567fe331aa1f3c644f9b6f232ff23959257acf9\",\"platform\":{\"architecture\":\"arm64\",\"os\":\"linux\"}},{\"mediaType\":\"application/vnd.docker.distribution.manifest.v2+json\",\"size\":949,\"digest\":\"sha256:496fb0ff2057c79254c9dc6ba999608a98219c5c93142569a547277c679e532c\",\"platform\":{\"architecture\":\"arm\",\"os\":\"linux\"}},{\"mediaType\":\"application/vnd.docker.distribution.manifest.v2+json\",\"size\":949,\"digest\":\"sha256:146ab6fa7ba3ab4d154b09c1c5522e4966ecd071bf23d1ba3df6c8b9fc33f8cb\",\"platform\":{\"architecture\":\"ppc64le\",\"os\":\"linux\"}},{\"mediaType\":\"application/vnd.docker.distribution.manifest.v2+json\",\"size\":949,\"digest\":\"sha256:bbef1f46572d1f33a92b53b0ba0ed5a1d09dab7ffe64be1ae3ae66e76275eabd\",\"platform\":{\"architecture\":\"s390x\",\"os\":\"linux\"}}]}"}
              }
              EOF
              cat > $(workspaces.outputs.path)/snapshot_spec.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "containerImage": "registry.io/image0@sha256:0000",
                    "repository": "quay.io/redhat-prod/myproduct----myrepo"
                  }
                ]
              }
              EOF
              cat > $(workspaces.outputs.path)/expected-signatures.json << EOF
              [
                {"arch": "amd64",
                 "digest": "sha256:2e8f38a0a8d2a450598430fa70c7f0b53aeec991e76c3e29c63add599b4ef7ee",
                 "reference": null, 
                 "repo": "image0",
                 "signing_key": "test_sig_key"},
                {"arch": "arm64",
                 "digest": "sha256:b3f9218fb5839763e62e52ee6567fe331aa1f3c644f9b6f232ff23959257acf9",
                 "reference": null,
                 "repo": "image0",
                 "signing_key": "test_sig_key"},
                {"arch": "arm",
                 "digest": "sha256:496fb0ff2057c79254c9dc6ba999608a98219c5c93142569a547277c679e532c",
                 "reference": null,
                 "repo": "image0",
                 "signing_key": "test_sig_key"},
                {"arch": "ppc64le",
                 "digest": "sha256:146ab6fa7ba3ab4d154b09c1c5522e4966ecd071bf23d1ba3df6c8b9fc33f8cb",
                 "reference": null,
                 "repo": "image0",
                 "signing_key": "test_sig_key"},
                {"arch": "s390x",
                 "digest": "sha256:bbef1f46572d1f33a92b53b0ba0ed5a1d09dab7ffe64be1ae3ae66e76275eabd",
                 "reference": null,
                 "repo": "image0",
                 "signing_key": "test_sig_key"},
                {"arch": "multiarch",
                 "digest": "sha256:60a4fb585b737b48b0e17caf6550974be2ac134eacee8622b35ae116b3503ed6",
                 "reference": null,
                 "repo": "image0",
                 "signing_key": "test_sig_key"}
              ]
              EOF
              cat << EOF >> $(workspaces.outputs.path)/test-config-map
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: test-sign-config
              data:
                SIG_KEY: test_sig_key
                QUAY_HOST: test.com
                QUAY_USER: test-user
                QUAY_PASSWORD: test-password
                REKOR_URL: test.com
                UPLOAD_TLOG: "false"
                AWS_DEFAULT_REGION: test-region-1
                AWS_ACCESS_KEY_ID: test-key-id
                AWS_SECRET_ACCESS_KEY: test-key-secret
              EOF
              kubectl apply -f $(workspaces.outputs.path)/test-config-map
    - name: setup-signing-config
      taskRef:
        name: generate-cosign-sign-config
      workspaces:
        - name: outputs
          workspace: tests-workspace
      params:
        - name: config_map_name 
          value: 'test-sign-config'
      runAfter:
        - setup
    - name: run-task
      taskRef:
        name: cosign-sign-snapshot
      workspaces:
        - name: outputs
          workspace: tests-workspace
      params:
        - name: r_signer_wrapper_cosign.r.fake_entry_point_runs
          value: ''
        - name: r_signer_wrapper_cosign.r.fake_entry_point_returns
          value: '@$(workspaces.outputs.path)/fake_entry_point_returns.json'
        - name: r_signer_wrapper_cosign.r.fake_entry_point_requests
          value: '@$(workspaces.outputs.path)/fake_entry_point_requests.json'
        - name: r_signer_wrapper_cosign.r.config_file
          value: $(workspaces.outputs.path)/pubtools-sign.conf
        - name: r_signer_wrapper_cosign.r.MAX_MANIFEST_DIGESTS_PER_SEARCH_REQUEST
          value: ''
        - name: r_signer_wrapper_cosign.r.settings.num_thread_pyxis
          value: ''
        - name: r_signer_wrapper_cosign.r.settings.pyxis_ssl_key_file
          value: ''
        - name: r_signer_wrapper_cosign.r.settings.pyxis_ssl_crt_file
          value: ''
        - name: r_signer_wrapper_cosign.r.settings.pyxis_server
          value: ''
        - name: r_dst_quay_client.r.fake_manifests
          value: "@$(workspaces.outputs.path)/fake_manifests.json"
        - name: r_dst_quay_client.r.host
          value: $(tasks.setup-signing-config.results.quay_host)
        - name: r_dst_quay_client.r.password
          value: $(tasks.setup-signing-config.results.quay_password)
        - name: r_dst_quay_client.r.username
          value: $(tasks.setup-signing-config.results.quay_user)
        - name: i_snapshot_str.data
          value: '{\"application\":\"myapp\",\"components\":[{\"name\":\"comp0\",\"containerImage\":\"registry.io/image0@sha256:0000\",\"repository\":\"quay.io/redhat-prod/myproduct----myrepo\"}]}'
        - name: i_snapshot_file.data
          value: ''
        - name: i_signing_key.data
          value: $(tasks.setup-signing-config.results.sig_key)
        - name: i_task_id.data
          value: ''
        - name: a_pool_size.a
          value: ''
        - name: a_executor_type.a
          value: ''
      runAfter:
        - setup-signing-config
    - name: check-result
      workspaces:
        - name: outputs
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/redhat-appstudio/release-service-utils:bc81bfed6062a386e48a76b252c6f33b52c411b0
            script: |
              #!/usr/bin/env python3
              import json
              expected_data = json.load(open("$(workspaces.outputs.path)/expected-signatures.json"))
              actual_data = json.load(open("$(workspaces.outputs.path)/root::o_sign_entries"))['data']
              print('expected')
              print(expected_data)
              print('----')
              print('actual')
              print(actual_data)
              assert expected_data == actual_data
              print("success")
      runAfter:
        - run-task

