---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: add-fbc-contribution
  labels:
    app.kubernetes.io/version: "1.5.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create internalrequests to add contributions to index images
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
      default: "snapshot_spec.json"
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: "data.json"
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
  results:
    - name: buildTimestamp
      description: Build timestamp used in the tag
    - name: mustSignIndexImage
      description: Whether the index image should be signed
    - name: mustPublishIndexImage
      description: Whether the index image should be published
    - name: requestResultsFile
      description: Internal Request results file
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: add-contribution
      image: quay.io/redhat-appstudio/release-service-utils:447ea0580a2cdd48b4091e1df86fab5c3f86d01c
      script: |
        #!/usr/bin/env sh
        #
        set -eo pipefail

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        echo -n "$(workspaces.data.path)/ir-$(context.taskRun.uid)-result.json" > $(results.requestResultsFile.path)

        # IIB is the default internal pipeline for fbc requests
        request=$(jq -r '.fbc.request // "iib"' ${DATA_FILE})

        default_build_timeout_seconds="300"
        iib_overwrite_from_index_credential=$(jq -r \
          '.fbc.iibOverwriteFromIndexCredential // "iib-overwrite-fromimage-credentials"' ${DATA_FILE})
        iib_service_config_secret=$(jq -r '.fbc.iibServiceConfigSecret // "iib-services-config"' ${DATA_FILE})
        iib_service_account_secret=$(jq -r '.fbc.iibServiceAccountSecret // "iib-service-account"' ${DATA_FILE})
        build_tags=$(jq '.fbc.buildTags // []' ${DATA_FILE})
        add_arches=$(jq '.fbc.addArches // []' ${DATA_FILE})
        hotfix=$(jq -r '.fbc.hotfix // "false"' ${DATA_FILE})
        staged_index=$(jq -r '.fbc.stagedIndex // "false"' ${DATA_FILE})
        build_timeout_seconds=$(jq -r --arg build_timeout_seconds ${default_build_timeout_seconds} \
          '.fbc.buildTimeoutSeconds // $build_timeout_seconds' ${DATA_FILE})

        timestamp_format=$(jq -r '.fbc.timestampFormat // "%s"' ${DATA_FILE})
        timestamp=$(date "+${timestamp_format}" | tee $(results.buildTimestamp.path))

        if [ "${hotfix}" == "true" ]; then
          issue_id=$(jq -r '.fbc.issueId // empty' ${DATA_FILE})
          if [ -z "${issue_id}" ]; then
            echo "Hotfix releases requires the issue id."
            exit 1
          fi
        fi

        componentsCount=$(jq '.components | length'  ${SNAPSHOT_PATH})
        for((componentIndex=0; componentIndex < componentsCount; componentIndex++)); do

          fbc_fragment=$(jq -cr ".components[$componentIndex].containerImage" ${SNAPSHOT_PATH})
          binary_image=$(jq -cr ".components[$componentIndex].updatedBinaryImage" ${SNAPSHOT_PATH})
          from_index=$(jq -cr ".components[$componentIndex].updatedFromIndex" ${SNAPSHOT_PATH})
          target_index=$(jq -cr ".components[$componentIndex].updatedTargetIndex" ${SNAPSHOT_PATH})

          if [ "${issue_id}" ]; then
            tag="${issue_id}-${timestamp}"
            target_index="${target_index}-${tag}"
          fi

          # The internal-request script will create the InternalRequest and wait until it finishes to get its status
          # If it fails (Failed, Rejected or Timed out) the script will exit and display the reason.
          echo "Creating InternalRequest to add FBC contribution to index image:"
          internal-request -r "${request}" \
              -p binaryImage=${binary_image} \
              -p fromIndex=${from_index} \
              -p targetIndex=${target_index} \
              -p fbcFragment=${fbc_fragment} \
              -p iibServiceConfigSecret=${iib_service_config_secret} \
              -p iibServiceAccountSecret=${iib_service_account_secret} \
              -p iibOverwriteFromIndexCredential=${iib_overwrite_from_index_credential} \
              -p buildTimeoutSeconds=${build_timeout_seconds} \
              -p buildTags=${build_tags} \
              -p addArches=${add_arches} \
              -p hotfix=${hotfix} \
              -p stagedIndex=${staged_index} \
              -t $(params.requestTimeout) |tee $(workspaces.data.path)/ir-$(context.taskRun.uid)-output.log

          internalRequest=$(awk 'NR==1{ print $2 }' $(workspaces.data.path)/ir-$(context.taskRun.uid)-output.log \
            | xargs)

          echo "done (${internalRequest})"

          # Fetching InternalRequest status and populating results
          results=$(kubectl get internalrequest ${internalRequest} -o jsonpath='{.status.results}' \
            | tee "$(workspaces.data.path)/ir-$(context.taskRun.uid)-result.json")

          conditions=$(kubectl get internalrequest ${internalRequest} \
            -o jsonpath='{.status.conditions[?(@.type=="Succeeded")]}')

          indexImage=$(jq -r '.jsonBuildInfo' <<< "${results}" | jq -r '.index_image' |tr -d "\n")
          indexImageResolved=$(jq -r '.jsonBuildInfo' <<< "${results}" | jq -r '.index_image_resolved' |tr -d "\n")

          mustSign=$(jq -r '.genericResult | fromjson' <<< "${results}" | jq -r '.sign_index_image' |tr -d "\n")
          mustPublish=$(jq -r '.genericResult | fromjson' <<< "${results}" | jq -r '.publish_index_image' |tr -d "\n")

          jq -cr \
            --arg indexImage "${indexImage}" \
            --arg indexImageResolved "${indexImageResolved}"\
            --arg mustSign "${mustSign}"\
            --arg mustPublish "${mustPublish}" \
            ".components[$componentIndex].indexImaged |= \$indexImage |
             .components[$componentIndex].indexImageResolved |= \$indexImageResolved |
             .components[$componentIndex].mustSign |= \$mustSign |
             .components[$componentIndex].mustPublish |= \$mustPublish" ${SNAPSHOT_PATH} \
            | tee $(workspaces.data.path)/temp_snapshot_spec.json

          mv $(workspaces.data.path)/temp_snapshot_spec.json ${SNAPSHOT_PATH}
        done

        # Setting all results
        # We only publish/sign if all components has the mustSign and mustPublish attributes set to true
        jq -cr '[.components[].mustSign] | unique | if( . | length) != 1 then "false"  else .[0] end' ${SNAPSHOT_PATH} \
        | tr -d "\n" > $(results.mustSignIndexImage.path)

        jq -cr '[.components[].mustPublish] | unique | if( . | length) != 1 then "false"  else .[0] end' ${SNAPSHOT_PATH} \
        | tr -d "\n" > $(results.mustPublishIndexImage.path)
