---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: add-fbc-contribution
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create internalrequests to add contributions to index images
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
      default: "snapshot_spec.json"
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: "data.json"
    - name: binaryImage
      type: string
      description: binaryImage value updated by update-ocp-tag task
    - name: fromIndex
      type: string
      description: fromIndex value updated by update-ocp-tag task
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
  results:
    - name: fbcOptIn
      description: Result to set weather the contribution is FBC opt in
    - name: requestResultsFile
      description: Internal Request results file
    - name: requestMessage
      description: Internal Request message
    - name: requestReason
      description: Internal Request reason
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: add-contribution
      image: quay.io/hacbs-release/release-utils:a9603c0ae1982be5e1142d44765b1475adc7ad40
      script: |
        #!/usr/bin/env sh
        #
        set -e

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        echo -n "$(workspaces.data.path)/ir-$(context.taskRun.uid)-result.json" > $(results.requestResultsFile.path)

        # IIB is the default internal pipeline for fbc requests
        request=$(jq -r '.fbc.request // "iib"' ${DATA_FILE})

        default_build_timeout_seconds="300"
        iib_overwrite_from_index_credential=$(jq -r \
          '.fbc.iibOverwriteFromIndexCredential // "iib-overwrite-fromimage-credentials"' ${DATA_FILE})
        iib_service_config_secret=$(jq -r '.fbc.iibServiceConfigSecret // "iib-services-config"' ${DATA_FILE})
        iib_service_account_secret=$(jq -r '.fbc.iibServiceAccountSecret // "iib-service-account"' ${DATA_FILE})
        build_tags=$(jq '.fbc.buildTags // []' ${DATA_FILE})
        add_arches=$(jq '.fbc.addArches // []' ${DATA_FILE})
        build_timeout_seconds=$(jq -r --arg build_timeout_seconds ${default_build_timeout_seconds} \
            '.fbc.buildTimeoutSeconds // $build_timeout_seconds' ${DATA_FILE})
        target_index=$(jq -r '.fbc.targetIndex' ${DATA_FILE})
        fbc_fragment=$(jq -cr '.components[0].containerImage' ${SNAPSHOT_PATH})

        # The internal-request script will create the InternalRequest and wait until it finishes to get its status
        # If it fails (Failed, Rejected or Timed out) the script will exit and display the reason.
        echo "Creating InternalRequest to add FBC contribution to index image:"
        internal-request -r "${request}" \
            -p binaryImage=$(params.binaryImage) \
            -p fromIndex=$(params.fromIndex) \
            -p targetIndex=${target_index} \
            -p fbcFragment=${fbc_fragment} \
            -p iibServiceConfigSecret=${iib_service_config_secret} \
            -p iibServiceAccountSecret=${iib_service_account_secret} \
            -p iibOverwriteFromIndexCredential=${iib_overwrite_from_index_credential} \
            -p buildTimeoutSeconds=${build_timeout_seconds} \
            -p buildTags=${build_tags} \
            -p addArches=${add_arches} \
            -t $(params.requestTimeout) |tee $(workspaces.data.path)/ir-$(context.taskRun.uid)-output.log

        internalRequest=$(awk 'NR==1{ print $2 }' $(workspaces.data.path)/ir-$(context.taskRun.uid)-output.log | xargs)
        echo "done (${internalRequest})"

        # Fetching InternalRequest status and populating results
        results=$(kubectl get internalrequest ${internalRequest} -o jsonpath='{.status.results}')
        echo "${results}" > "$(workspaces.data.path)/ir-$(context.taskRun.uid)-result.json"

        conditions=$(kubectl get internalrequest ${internalRequest} \
          -o jsonpath='{.status.conditions[?(@.type=="Succeeded")]}')

        jq '.genericResult' <<< "${results}" | tee $(results.fbcOptIn.path)
        jq '.reason // "Unset"'  <<< "${conditions}" | tee $(results.requestReason.path)
        jq '.message // "Unset"' <<< "${conditions}" | tee $(results.requestMessage.path)
