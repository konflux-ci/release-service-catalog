---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-image
  labels:
    app.kubernetes.io/version: "1.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create internalrequests to sign snapshot components
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
      default: "snapshot_spec.json"
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: "data.json"
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: commonTags
      type: string
      description: Space separated list of common tags to be used when publishing
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: concurrentLimit
      type: string
      description: The maximum number of images to be processed at once
      default: 4
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/redhat-appstudio/release-service-utils:4713b58df57b06e5ca248f1c8227a8493ceb5b01
      script: |
        #!/usr/bin/env sh
        #
        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        RUNDIR="$(workspaces.data.path)/$(context.taskRun.uid)"
        IDENTIFIER=$(context.taskRun.uid)

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        # make sure RUNDIR exists
        mkdir -p $RUNDIR

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:released"
        request=$(jq -r '.sign.request // "hacbs-signing-pipeline"' ${DATA_FILE})
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // $default_pipeline_image' ${DATA_FILE})
        config_map_name=$(jq -r '.sign.configMapName // "signing-config-map"' ${DATA_FILE})

        N=$(params.concurrentLimit)  # The maximum number of images to be processed at once
        count=0
        COMPONENTS_LENGTH=$(jq '.components |length' ${SNAPSHOT_PATH})
        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do

            referenceContainerImage=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" ${SNAPSHOT_PATH})

            reference=$(jq -r ".components[${COMPONENTS_INDEX}].repository" ${SNAPSHOT_PATH})

            # Translate direct quay.io reference to public facing registry reference
            # quay.io/redhat-prod/product----repo -> registry.redhat.io/product/repo
            # quay.io/redhat-pending/product----repo -> registry.stage.redhat.io/product/repo
            reference=${reference/quay.io\/redhat-prod/registry.redhat.io}
            reference=${reference/quay.io\/redhat-pending/registry.stage.redhat.io}
            reference=${reference//----//}

            manifest_digest="${referenceContainerImage#*@}"

            for tag in $(params.commonTags); do
              echo "Creating InternalRequest to sign image with tag ${tag}:"
              echo "- reference=${reference}:${tag}"
              echo "- manifest_digest=${manifest_digest}"
              echo "- requester=$(params.requester)"

              internal-request -r "${request}" \
                  -p pipeline_image=${pipeline_image} \
                  -p reference=${reference}:${tag} \
                  -p manifest_digest=${manifest_digest} \
                  -p requester=$(params.requester) \
                  -p config_map_name=${config_map_name} \
                  -i $IDENTIFIER \
                  -s false
              ((++count))

              if [ "$count" -eq "$N" ]; then
                  wait-for-ir -i $IDENTIFIER -t $(params.requestTimeout)
                  count=0
              fi
            done
        done
        wait-for-ir -i $IDENTIFIER -t $(params.requestTimeout)
        echo "done"
