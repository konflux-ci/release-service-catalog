---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-image
  labels:
    app.kubernetes.io/version: "3.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create internalrequests to sign snapshot components
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: concurrentLimit
      type: string
      description: The maximum number of images to be processed at once
      default: 4
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/konflux-ci/release-service-utils:12841cd2a35711b24a6749a93569d4118b173dcb
      script: |
        #!/usr/bin/env sh
        #
        set -e

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        RUNDIR="$(workspaces.data.path)/$(context.taskRun.uid)"
        TASK_LABEL="internal-services.appstudio.openshift.io/group-id"
        TASK_ID=$(context.taskRun.uid)
        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        # make sure RUNDIR exists
        mkdir -p $RUNDIR

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:released"
        request=$(jq -r '.sign.request // "hacbs-signing-pipeline"' ${DATA_FILE})
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // $default_pipeline_image' ${DATA_FILE})
        config_map_name=$(jq -r '.sign.configMapName // "signing-config-map"' ${DATA_FILE})
        defaultPushSourceContainer=$(jq -r '.mapping.defaults.pushSourceContainer' ${DATA_FILE})

        N=$(params.concurrentLimit)  # The maximum number of images to be processed at once
        count=0
        COMPONENTS_LENGTH=$(jq '.components |length' ${SNAPSHOT_PATH})
        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do

            referenceContainerImage=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" ${SNAPSHOT_PATH})

            reference=$(jq -r ".components[${COMPONENTS_INDEX}].repository" ${SNAPSHOT_PATH})

            git_sha=$(jq -r ".components[${COMPONENTS_INDEX}].source.git.revision" ${SNAPSHOT_PATH})

            TAGS=$(jq -r ".components[${COMPONENTS_INDEX}].tags | join(\" \")" ${SNAPSHOT_PATH})

            # Translate direct quay.io reference to public facing registry json
            # quay.io/redhat-prod/product----repo ->
            #   [{"repo":"redhat.io","url":registry.redhat.io/product/repo"},
            #   {"repo":"access.redhat.com","url":"registry.access.redhat.com/product/repo"}]
            # quay.io/redhat-pending/product----repo ->
            #   [{"repo":"redhat.io","url":registry.stage.redhat.io/product/repo"},
            #   {"repo":"access.redhat.com","url":"registry.access.stage.redhat.com/product/repo"}]
            referenceJson=$(translate-delivery-repo $reference)

            # check if multi-arch
            RAW_OUTPUT=$(skopeo inspect --no-tags --raw docker://${referenceContainerImage})
            if [ $(jq -r '.mediaType' <<< $RAW_OUTPUT) == "application/vnd.oci.image.manifest.v1+json" ] ; then
              manifest_digests="${referenceContainerImage#*@}"
            else
              manifest_digests=$(jq -r '.manifests[].digest' <<< $RAW_OUTPUT)
            fi

            sourceContainerDigest=
            # Push source container if the component has pushSourceContainer: true or if the
            # pushSourceContainer key is missing from the component and the defaults has
            # pushSourceContainer: true
            if [[ $(jq -r ".components[$COMPONENTS_INDEX].pushSourceContainer" ${SNAPSHOT_PATH}) == "true" ]] || \
               [[ $(jq ".components[$COMPONENTS_INDEX] | has(\"pushSourceContainer\")" ${SNAPSHOT_PATH}) == "false" && \
                ${defaultPushSourceContainer} == "true" ]] ; then
              source_repo=${referenceContainerImage%%@sha256:*}
              source_reference_tag=sha256-${referenceContainerImage#*@sha256:}.src
              # Calculate the source container image based on the provided container image
              sourceContainer="${source_repo}:${source_reference_tag}"

              # oras has very limited support for selecting the right auth entry,
              # so create a custom auth file with just one entry
              AUTH_FILE=$(mktemp)
              select-oci-auth "${sourceContainer}" > "$AUTH_FILE"
              sourceContainerDigest=$(oras resolve --registry-config "$AUTH_FILE" "${sourceContainer}" 2>/dev/null)
            fi

            for manifest_digest in $manifest_digests; do
              for tag in ${TAGS}; do
                for registry_reference in $(jq -r '.[] | .url' <<< $referenceJson); do
                  echo "Creating InternalRequest to sign image with tag ${tag}:"
                  echo "- reference=${registry_reference}:${tag}"
                  echo "- manifest_digest=${manifest_digest}"
                  echo "- requester=$(params.requester)"

                  internal-request -r "${request}" \
                      -p pipeline_image=${pipeline_image} \
                      -p reference=${registry_reference}:${tag} \
                      -p manifest_digest=${manifest_digest} \
                      -p requester=$(params.requester) \
                      -p config_map_name=${config_map_name} \
                      -l ${TASK_LABEL}=${TASK_ID} \
                      -l ${PIPELINERUN_LABEL}=$(params.pipelineRunUid) \
                      -s false
                  ((++count))

                  if [ "$count" -eq "$N" ]; then
                      wait-for-ir -l ${TASK_LABEL}=${TASK_ID} -t $(params.requestTimeout)
                      count=0
                  fi
                done
              done
            done

            if [ "${sourceContainerDigest}" != "" ] ; then
              for tag in ${TAGS}; do
                sourceTag=${tag}-source

                for registry_reference in $(jq -r '.[] | .url' <<< $referenceJson); do
                  echo "Creating InternalRequest to sign image with tag ${sourceTag}:"
                  echo "- reference=${registry_reference}:${sourceTag}"
                  echo "- manifest_digest=${sourceContainerDigest}"
                  echo "- requester=$(params.requester)"

                  internal-request -r "${request}" \
                      -p pipeline_image=${pipeline_image} \
                      -p reference=${registry_reference}:${sourceTag} \
                      -p manifest_digest=${sourceContainerDigest} \
                      -p requester=$(params.requester) \
                      -p config_map_name=${config_map_name} \
                      -l ${TASK_LABEL}=${TASK_ID} \
                      -l ${PIPELINERUN_LABEL}=$(params.pipelineRunUid) \
                      -s false
                  ((++count))

                  if [ "$count" -eq "$N" ]; then
                      wait-for-ir -l ${TASK_LABEL}=${TASK_ID} -t $(params.requestTimeout)
                      count=0
                  fi
                done
              done
            fi
        done
        wait-for-ir -l ${TASK_LABEL}=${TASK_ID} -t $(params.requestTimeout)
        echo "done"
