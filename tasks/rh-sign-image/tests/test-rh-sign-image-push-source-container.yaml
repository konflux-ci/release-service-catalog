---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-rh-sign-image-push-source-container
spec:
  description: |
    Test creating a internal request to sign an image with the pushSourceContainer
    values set in the mapping and components
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
            script: |
              #!/usr/bin/env sh
              set -eux

              cat > $(workspaces.data.path)/snapshot_spec.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "source": {
                      "git": {
                        "revision": "deadbeef"
                      }
                    },
                    "containerImage": "registry.io/image0@sha256:0000",
                    "repository": "quay.io/redhat-prod/myproduct0----myrepo0",
                    "pushSourceContainer": true,
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp1",
                    "source": {
                      "git": {
                        "revision": "alivebeef"
                      }
                    },
                    "containerImage": "registry.io/image1@sha256:1111",
                    "repository": "quay.io/redhat-prod/myproduct1----myrepo1",
                    "pushSourceContainer": false,
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp2",
                    "source": {
                      "git": {
                        "revision": "deaderbeef"
                      }
                    },
                    "containerImage": "registry.io/image2@sha256:2222",
                    "repository": "quay.io/redhat-prod/myproduct2----myrepo2",
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  }
                ]
              }
              EOF

              cat > $(workspaces.data.path)/data.json << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": "true"
                  }
                },
                "sign": {
                  "request": "hacbs-signing-pipeline",
                  "configMapName": "signing-config-map"
                }
              }
              EOF
    - name: run-task
      taskRef:
        name: rh-sign-image
      params:
        - name: requester
          value: testuser-single
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: snapshot_spec.json
        - name: dataPath
          value: data.json
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
            script: |
              #!/usr/bin/env sh
              set -eux

              # Just checking source container IRs because the others are checked in the single
              # component test. There should be 8 IRs for the first component (two tags * one for
              # registry.access.redhat.com and one for registry.redhat.io, * one for the image, one for
              # the source image), 4 for the second component (same 4 as above but only half as 
              # pushSourceContainer is false), and 8 for the final (same as first component).
              #
              # Just checking the first source one for each (IRs 5 and 17, but also ensuring IR
              # 13 isn't for the comp1 source container. These will use registry.redhat.io and the
              # first commonTag which is some-prefix-12345

              # source container internal request for component 0
              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers | \
                head -5 | tail -1)"
              params=$(kubectl get internalrequest ${internalRequest} -o jsonpath="{.spec.params}")

              if [ $(jq -r '.reference' <<< "${params}") \
                != "registry.redhat.io/myproduct0/myrepo0:some-prefix-12345-source" ]; then
                echo "floating tag reference does not match for source container comp0 IR"
                exit 1
              fi

              # Ensure IR13 is not for a source container for comp1 as comp1 has pushSourceContainer false
              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers | \
                head -13 | tail -1)"
              params=$(kubectl get internalrequest ${internalRequest} -o jsonpath="{.spec.params}")

              if [ $(jq -r '.reference' <<< "${params}") \
                == "registry.redhat.io/myproduct1/myrepo1:some-prefix-12345-source" ]; then
                echo "Incorrectly signed source container for comp1"
                exit 1
              fi

              # source container internal request for component 2
              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers | \
                head -17 | tail -1)"
              params=$(kubectl get internalrequest ${internalRequest} -o jsonpath="{.spec.params}")

              if [ $(jq -r '.reference' <<< "${params}") \
                != "registry.redhat.io/myproduct2/myrepo2:some-prefix-12345-source" ]; then
                echo "floating tag reference does not match for source container comp2 IR"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
