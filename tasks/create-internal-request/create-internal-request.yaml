---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-internal-request
  labels:
    app.kubernetes.io/version: "0.12.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
      Creates an InternalRequest resource to call IIB service
  params:
    - name: pipelineRunName
      type: string
      description: The name of the Parent PipelineRun of this task
    - name: request
      type: string
      description: request type
    - name: internalRequestParams
      type: string
      description: Internal Request parameters
    - name: dataPath
      description: Path to the JSON file of the merged data to use in the data workspace
      type: string
    - name: inputDataFile
      type: string
      description: Optional file to read data from
      default: ""
    - name: updateGenericResult
      default: "false"
      description: Should the task update the genericResult result
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
  results:
    - name: requestMessage
      type: string
      description: Internal Request message
    - name: requestReason
      type: string
      description: Internal Request reason
    - name: requestResultsFile
      type: string
      description: Internal Request results file
    - name: genericResult
      type: string
      description: genericResult field from the InternalRequest Status to expose to the PipelineRun
  workspaces:
    - name: data
      description: Workspace to store the params and responses for the internalRequest
  steps:
    - name: merge-internal-request-parameters
      image:
        quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      script: |
          #!/usr/bin/env bash
          DATA_FILE="$(workspaces.data.path)/$(params.subdirectory)/$(params.dataPath)"
          if [ ! -f "${DATA_FILE}" ] ; then
            echo "Data JSON file does not exist: ${DATA_FILE}"
            exit 1
          fi

          IR_PARAMS_FILE="$(workspaces.data.path)/$(params.subdirectory)/ir-params-$$.txt"
          cat > ${IR_PARAMS_FILE} <<JSON
          $(params.internalRequestParams)
          JSON

          # the data json should be merged with the internalrequest parameters
          JSON_PARAMS="$(jq -c '.' ${IR_PARAMS_FILE})"
          ARRAY_PARAMS=$(jq -c '.fbc | [ to_entries[] | { name: .key, value } ]' \
            $(workspaces.data.path)/$(params.subdirectory)/$(params.dataPath))
          ARRAY_PARAMS_LENGTH=$(jq '. | length' <<< "${ARRAY_PARAMS}")

          INDEX=$(jq '. | length' ${IR_PARAMS_FILE})
          for(( i=0; i<$ARRAY_PARAMS_LENGTH; i++ )); do
            PARAM=$(jq -r ".[${i}].name" <<< "${ARRAY_PARAMS}")
            VALUE=$(jq -r ".[${i}].value" <<< "${ARRAY_PARAMS}")

            # parameters from the task should replace the ones from the data.json
            if [[ -n $(jq ".[] | select(.name==\"${PARAM}\")" $IR_PARAMS_FILE) ]]; then
              continue
            fi

            JSON_PARAMS=$(jq ".[${INDEX}] += {name: \"${PARAM}\", value: \"$(echo ${VALUE})\"}" \
              <<< "${JSON_PARAMS}")
            let INDEX=$(( INDEX + 1 ))
          done
          echo $JSON_PARAMS > $(workspaces.data.path)/$(params.subdirectory)/prepared-json-params.txt
    - name: prepare-internal-request
      image:
        quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      script: |
          #!/usr/bin/env bash
          #
          set -e
          # Tekton wraps the $(param.params) in a JSON string that in some usecases might contain another JSON string
          # that breaks jq parsing, so we need to sanitize it before parsing it. Currently it supports only single
          # nested JSON string.

          # sanitize
          #
          # param string `file`
          sanitize() {
            TEMP="${1}-tmp"
            # UNESCAPED=$(grep -Po  "(?<=.sanitize.)(.*)+(?=./sanitize.)" ${1})
            SANITIZED_JSON=$(awk -e \
                '{match($0, /"{.*}"/, m);
                {start=index($0, m[0])+1; end=length(m[0])-2} print substr($0, start, end) }' ${1} | \
                jq -Rc "." | sed 's|\\|\\\\|g')
            awk -v sanitized=${SANITIZED_JSON} -e '{gsub(/"{.*}"/, sanitized); gsub("\\\\","\\\\\\"); print}' ${1} \
            | tee ${TEMP}

            if jq "." ${TEMP} >/dev/null; then
              mv ${TEMP} ${1}
            else
                return 1
            fi
          }

          # saving the parameters preserving the string as is
          JSON_PARAMS="$(workspaces.data.path)/$(params.subdirectory)/prepared-json-params.txt"

          # sanitizing the string
          sanitize ${JSON_PARAMS}

          # building the InternalRequest yaml
          #
          IR_DIR="$(workspaces.data.path)/$(params.subdirectory)/internal-request"
          [ -d "${IR_DIR}" ] || mkdir ${IR_DIR}
          IR="${IR_DIR}/ir-$(params.pipelineRunName)-$(context.taskRun.uid).yaml"
          cat > ${IR} <<YAML
          apiVersion: appstudio.redhat.com/v1alpha1
          kind: InternalRequest
          metadata:
            name: "ir-$(params.pipelineRunName)-$(params.request)"
          spec:
            request: "$(params.request)"
            params:
          YAML

          LENGTH=`jq ". | length" ${JSON_PARAMS}`
          for (( i=0; i<${LENGTH}; i++ )); do
            INPUT=$(jq -r ".[${i}]|[.name, .value]| @tsv" ${JSON_PARAMS})
            read -r PARAM VALUE <<< "${INPUT}"
            if [ `jq -e ".[${i}]| has(\"jsonKey\")" ${JSON_PARAMS}` == "true" ]; then
                JSON_KEY=`jq -r ".[${i}]|[.jsonKey]| @tsv" ${JSON_PARAMS}`
                # check if the request needs the sharedRequestFile;
                # otherwise the source is a json string
                IFS=":" read -r SOURCE TYPE KEY  <<< $VALUE
                if [ "${SOURCE}" == "sharedRequestFile" ]; then
                    case ${TYPE} in
                        "json")
                            # it has a nested json string
                            VALUE=`jq -cr "${KEY}" $(params.inputDataFile) \
                            | jq -cr "${JSON_KEY}"`
                        ;;
                    esac
                else
                    VALUE=$(echo "${VALUE}" |tr -d "\\" 2>/dev/null |tr -d "\'" |jq -cr "${JSON_KEY}")
                fi
            fi
            echo "    ${PARAM}: \"${VALUE}\"" >> ${IR}
          done
    - name: create-internal-request
      image:
        quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      script: |
          #!/usr/bin/env sh
          PATH=/bin:/usr/bin:/usr/local/bin
          export PATH

          IR_DIR="$(workspaces.data.path)/$(params.subdirectory)/internal-request"
          IR="${IR_DIR}/ir-$(params.pipelineRunName)-$(context.taskRun.uid).yaml"
          kubectl create -f ${IR}
    - name: watch-internal-request-status
      image:
        quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      script: |
          #!/usr/bin/env sh
          PATH=/bin:/usr/bin:/usr/local/bin
          TASKRUN="/tmp/$$.sh"
          JSON_PARAMS="$(workspaces.data.path)/$(params.subdirectory)/prepared-json-params.txt"

          cat > ${TASKRUN} <<SH
          #!/usr/bin/env sh
          #
          # the task might need to get input from a shared file
          IR_DIR="$(workspaces.data.path)/$(params.subdirectory)/internal-request"
          RESULTSFILE="\${IR_DIR}/$(params.pipelineRunName)-$(context.taskRun.uid)-results.txt"
          echo -n \${RESULTSFILE} |tee $(results.requestResultsFile.path)

          IR="ir-$(params.pipelineRunName)-$(params.request)"
          while true; do
            REASON=\$(kubectl get internalrequest \${IR} -o \
                jsonpath='{.status.conditions[?(@.type=="Succeeded")].reason}')
            case "\${REASON}" in
              Succeeded | Failed | Rejected )
                echo "InternalRequest finished"
                echo \${REASON} | tee $(results.requestReason.path)
                kubectl get internalrequest \${IR} -o jsonpath='{.status.conditions[?(@.type=="Succeeded")].message}' \
                | tee $(results.requestMessage.path)
                if [ "$(params.updateGenericResult)" == "true" ]; then
                    kubectl get internalrequest \${IR} -o jsonpath='{.status.results.genericResult}' \
                    | tee $(results.genericResult.path)
                fi
                kubectl get internalrequest \${IR} -o jsonpath='{.status.results}' \
                | tee \${RESULTSFILE}
                break
                ;;
              "*")
                ;;
            esac
            sleep 30
          done
          [ \$(kubectl get internalrequest \${IR} -o \
            jsonpath='{.status.conditions[?(@.type=="Succeeded")].reason}') == "Succeeded" ]
          SH
          chmod +x ${TASKRUN}
          timeout $(jq -cr '.[]| select(.name=="requestUpdateTimeout") |.value' ${JSON_PARAMS}) ${TASKRUN}
          SYSEXIT=$?
          [ ${SYSEXIT} -eq 124 ] && echo "Timeout while waiting for the internal request update"
          exit ${SYSEXIT}
