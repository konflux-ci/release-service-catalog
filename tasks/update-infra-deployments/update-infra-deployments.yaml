---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "release"
  name: update-infra-deployments
spec:
  description: |
   This task clones redhat-appstudio/infra-deployments GH repository.
   It then runs a script obtained from the infra-deployment-update-script key in data which can modify text files
   It then generates pull-request for redhat-appstudio/infra-deployments repository using the modified files.
  params:
    - name: dataJsonPath
      description: path to data json file
    - name: snapshotPath
      description: path to snapshot json file
    - name: targetGHRepo
      description: GitHub repository of the infra-deployments code
      default: redhat-appstudio/infra-deployments
    - name: gitImage
      description: Image reference containing the git command
      default: >-
        registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
    - name: scriptImage
      description: Image reference for SCRIPT execution
      default: >-
        quay.io/hacbs-release/release-utils@sha256:5733ece907aa70d6ebced36484c936731e8b27bfcf87fed226a0ecf95047a6b8
    - name: sharedSecret
      default: infra-deployments-pr-creator
      description: secret in the namespace which contains private key for the GitHub App
    - name: githubAppID
      description: ID of Github app used for updating PR
      default: "305606"
    - name: githubAppInstallationID
      description: Installation ID of Github app in the organization
      default: "35269675"
  volumes:
    - name: infra-deployments-pr-creator
      secret:
        # 'private-key' - private key for Github app
        secretName: $(params.sharedSecret)
    - name: shared-dir
      emptyDir: {}
  steps:
    - name: git-clone-infra-deployments
      image: $(params.gitImage)
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: TARGET_GH_REPO
          value: "$(params.targetGHRepo)"
      script: |
        git clone "https://github.com/${TARGET_GH_REPO}.git" cloned
    - name: run-update-script
      image: $(params.scriptImage)
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      script: |
        cd cloned
        
        echo "snapshot:"
        cat "$(params.snapshotPath)"
        echo ""
        
        # we assume we only have one component in the service.
        #
        revision=$(cat "$(params.snapshotPath)" | jq -r .components[0].source.git.revision)
        echo "revision: $revision"
        echo $revision > ../revision.txt

        originRepo=$(cat "$(params.snapshotPath)" | jq -r .components[0].source.git.url)
        echo "origin repo: $originRepo"
        echo $originRepo > ../originRepo.txt

        # get SCRIPT from Data
        echo "data: $(params.dataJsonPath)"
        SCRIPT=$(cat "$(params.dataJsonPath)" | jq -r '."infra-deployment-update-script" // empty')

        if [ "${SCRIPT}" == "" ] ; then
          echo "No script provided via 'infra-deployment-update-script' key in data"
          exit 0
        fi

        echo "original script:"
        echo "$SCRIPT"
        PATCHED_SCRIPT=$(echo "$SCRIPT" | sed "s/{{ revision }}/$revision/g")
        echo "patched script:"
        echo "$PATCHED_SCRIPT"
        echo "$PATCHED_SCRIPT" | sh
    - name: get-diff-files
      image: $(params.gitImage)
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      script: |
        cd cloned
        git status -s --porcelain | cut -c4- > ../updated_files.txt
    # Based on https://github.com/tektoncd/catalog/tree/main/task/github-app-token/0.2/
    - name: create-pr
      image: >-
       quay.io/redhat-appstudio/github-app-token@sha256:b4f2af12e9beea68055995ccdbdb86cfe1be97688c618117e5da2243dc1da18e
      volumeMounts:
        - name: infra-deployments-pr-creator
          mountPath: /secrets/deploy-key
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: GITHUBAPP_KEY_PATH
          value: /secrets/deploy-key/private-key
        - name: GITHUBAPP_APP_ID
          value: "$(params.githubAppID)"
        - name: GITHUBAPP_INSTALLATION_ID
          value: "$(params.githubAppInstallationID)"
        - name: GITHUB_API_URL
          value: https://api.github.com
        - name: TARGET_GH_REPO
          value: "$(params.targetGHRepo)"
      script: |
        #!/usr/bin/env python3
        import json
        import os
        import time
        import base64

        import requests
        from jwcrypto import jwk, jwt

        EXPIRE_MINUTES_AS_SECONDS = int(os.environ.get('GITHUBAPP_TOKEN_EXPIRATION_MINUTES', 10)) * 60
        # TODO support github enteprise
        GITHUB_API_URL = os.environ.get('GITHUB_API_URL')

        with open('originRepo.txt', 'r') as fileA:
          originRepo = fileA.read().rstrip()
        with open('revision.txt', 'r') as fileB:
          revision = fileB.read().rstrip()

        class GitHub():
            token = None

            def __init__(self, private_key, app_id=None, installation_id=None):
                if not isinstance(private_key, bytes):
                    raise ValueError(f'"{private_key}" parameter must be byte-string')
                self._private_key = private_key
                self.app_id = app_id
                self.token = self._get_token(installation_id)

            def _load_private_key(self, pem_key_bytes):
                return jwk.JWK.from_pem(pem_key_bytes)

            def _app_token(self, expire_in=EXPIRE_MINUTES_AS_SECONDS):
                key = self._load_private_key(self._private_key)
                now = int(time.time())
                token = jwt.JWT(
                    header={"alg": "RS256"},
                    claims={
                        "iat": now,
                        "exp": now + expire_in,
                        "iss": self.app_id
                    },
                    algs=["RS256"],
                )
                token.make_signed_token(key)
                return token.serialize()

            def _get_token(self, installation_id=None):
                app_token = self._app_token()
                if not installation_id:
                    return app_token

                req = self._request(
                    "POST",
                    f"/app/installations/{installation_id}/access_tokens",
                    headers={
                        "Authorization": f"Bearer {app_token}",
                        "Accept": "application/vnd.github.machine-man-preview+json"
                    })

                ret = req.json()
                if 'token' not in ret:
                    raise Exception(f"Authentication errors: {ret}")

                return ret['token']

            def _request(self, method, url, headers={}, data={}):
                if self.token and 'Authorization' not in headers:
                    headers.update({"Authorization": "Bearer " + self.token})
                if not url.startswith("http"):
                    url = f"{GITHUB_API_URL}{url}"
                return requests.request(method,
                                        url,
                                        headers=headers,
                                        data=json.dumps(data))

            def create_mr(self):
                repo_name = originRepo.split('/')[-1]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                req = self._request(
                    "POST",
                    f"/repos/{target_gh_repo}/pulls",
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={
                        "head": repo_name,
                        "base": "main",
                        "title": f"{repo_name} update",
                        "maintainer_can_modify": False
                    })
                json_output = req.json()
                print(json_output)
                return json_output

            def create_reset_branch(self):
                branch = originRepo.split('/')[-1]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                target_branch = self._request("GET", f"/repos/{target_gh_repo}/git/refs/heads/{branch}").json()
                main_branch_sha = self._request("GET", f"/repos/{target_gh_repo}/git/refs/heads/main")\
                                  .json()['object']['sha']
                if "ref" in target_branch:
                    # update branch
                    self._request(
                        "PATCH",
                        f"/repos/{target_gh_repo}/git/refs/heads/{branch}",
                        data={"sha": main_branch_sha, "force": True}
                    )
                else:
                    # create branch
                    self._request(
                        "POST",
                        f"/repos/{target_gh_repo}/git/refs",
                        data={"sha": main_branch_sha, "ref": f"refs/heads/{branch}"}
                    )

            def upload_content(self):
                branch = originRepo.split('/')[-1]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                for file in open('updated_files.txt').readlines():
                    file = file.strip()
                    with open(f"cloned/{file}", "rb") as fd:
                        encoded_string = base64.b64encode(fd.read()).decode("utf-8")
                    old_sha = self._request("GET", f'/repos/{target_gh_repo}/contents/{file}').json().get("sha")
                    if old_sha is None:
                        self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', \
                          data={"message": f"update {file}", "branch": branch, "content": encoded_string})
                    else:
                        self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', \
                          data={"message": f"update {file}", "branch": branch, \
                          "content": encoded_string, "sha": old_sha})

            def get_pr(self):
                repo_name = originRepo.split('/')[-1]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                req = self._request(
                    "GET",
                    f"/repos/{target_gh_repo}/pulls",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                json_output = req.json()
                for item in json_output:
                    if item["user"]["login"].endswith("[bot]") and item["head"]["ref"] == repo_name:
                        return item

            def get_pr_url_from_sha(self, sha):
                req = self._request(
                    "GET",
                    f"/search/issues?q={sha}",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                return req.json()["items"][0]["pull_request"]["html_url"]

            def update_mr_description(self, pr_url, description):
                req = self._request(
                    "PATCH",
                    pr_url,
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={ "body": description })
                json_output = req.json()
                print(json_output)

        def main():
            with open(os.environ['GITHUBAPP_KEY_PATH'], 'rb') as key_file:
                key = key_file.read()

            if os.environ.get('GITHUBAPP_APP_ID'):
                app_id = os.environ['GITHUBAPP_APP_ID']
            else:
                raise Exception("application id is not set")

            print(f"Getting user token for application_id: {app_id}")
            github_app = GitHub(
                key,
                app_id=app_id,
                installation_id=os.environ.get('GITHUBAPP_INSTALLATION_ID'))

            github_app.create_reset_branch()
            github_app.upload_content()
            infra_pr = github_app.create_mr()
            if "url" not in infra_pr:
                infra_pr = github_app.get_pr()
            description = infra_pr["body"]
            if description == None:
                description = "Included PRs:"
            new_pr_link = github_app.get_pr_url_from_sha(revision)
            new_description = f"{description}\r\n- {new_pr_link}"
            github_app.update_mr_description(infra_pr["url"], new_description)

        if __name__ == '__main__':
            main()

  workspaces:
    - name: artifacts
      description: Workspace containing arbitrary artifacts used during the task run.
      optional: true
    - name: data
      description: The workspace where the snapshot spec json file resides
