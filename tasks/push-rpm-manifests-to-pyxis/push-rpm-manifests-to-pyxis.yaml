---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-rpm-manifests-to-pyxis
  labels:
    app.kubernetes.io/version: "0.4.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that extracts all rpms from the sboms and pushes them to Pyxis as an RPM Manifest.
  params:
    - name: pyxisJsonPath
      description: Path to the JSON string of the saved Pyxis data in the data workspace
      type: string
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: server
      type: string
      description: The server type to use. Options are 'production','production-internal,'stage-internal' and 'stage'.
      default: production
    - name: concurrentLimit
      type: string
      description: The maximum number of images to be processed at once
      default: 4
  workspaces:
    - name: data
      description: The workspace where the pyxis data json file resides
  volumes:
    - name: workdir
      emptyDir: {}
  steps:
    - name: download-sbom-files
      image:
        quay.io/konflux-ci/release-service-utils:4fc4e746955ed7b6d43f7a0e327b7f573980fd6d
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env bash
        set -eux

        PYXIS_FILE="$(workspaces.data.path)/$(params.pyxisJsonPath)"
        if [ ! -f "${PYXIS_FILE}" ] ; then
            echo "No valid pyxis file was provided."
            exit 1
        fi

        NUM_COMPONENTS=$(jq '.components | length' "${PYXIS_FILE}")

        mkdir /workdir/sboms
        cd /workdir/sboms

        for (( i=0; i < $NUM_COMPONENTS; i++ )); do
          COMPONENT=$(jq -c --argjson i "$i" '.components[$i]' "${PYXIS_FILE}")
          IMAGEURL=$(jq -r '.containerImage' <<< "${COMPONENT}")
          NUM_PYXIS_IMAGES=$(jq '.pyxisImages | length' <<< "${COMPONENT}")
          for (( j=0; j < $NUM_PYXIS_IMAGES; j++ )); do
            PYXIS_IMAGE=$(jq -c --argjson j "$j" '.pyxisImages[$j]' <<< "${COMPONENT}")
            FILE="$(jq -r '.imageId' <<< "$PYXIS_IMAGE").json"
            DIGEST="$(jq -r '.digest' <<< "$PYXIS_IMAGE")"
            ARCH_DIGEST="$(jq -r '.arch_digest' <<< "$PYXIS_IMAGE")"
            # You can't pass --platform to a single arch image or cosign errors.
            # If digest equals arch_digest, then it's a single arch image
            if [ "$DIGEST" = "$ARCH_DIGEST" ] ; then
              echo "Fetching sbom for single arch image: $IMAGEURL to: $FILE"
              cosign download sbom --output-file "${FILE}" "${IMAGEURL}"
            else
              OS=$(jq -r '.os' <<< "$PYXIS_IMAGE")
              ARCH=$(jq -r '.arch' <<< "$PYXIS_IMAGE")
              PLATFORM="${OS}/${ARCH}"
              echo "Fetching sbom for image: $IMAGEURL with platform: $PLATFORM to: $FILE"
              cosign download sbom --output-file "${FILE}" --platform "${PLATFORM}" "${IMAGEURL}"
            fi
          done
        done

        SBOM_COUNT=$(ls *.json | wc -l )
        PYXIS_IMAGES=$(jq '[.components[].pyxisImages | length] | add' "${PYXIS_FILE}")
        if [ $SBOM_COUNT != $PYXIS_IMAGES ]; then
          echo "ERROR: Expected to fetch sbom for $PYXIS_IMAGES images, but only $SBOM_COUNT were saved"
          exit 1
        fi

    - name: push-rpm-manifests-to-pyxis
      image:
        quay.io/konflux-ci/release-service-utils:4fc4e746955ed7b6d43f7a0e327b7f573980fd6d
      env:
        - name: pyxisCert
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: pyxisKey
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      script: |
        #!/usr/bin/env sh
        set -eu

        if [[ "$(params.server)" == "production" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.api.redhat.com/graphql/"
        elif [[ "$(params.server)" == "stage" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql-pyxis.preprod.api.redhat.com/graphql/"
        elif [[ "$(params.server)" == "production-internal" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql.pyxis.engineering.redhat.com/graphql/"
        elif [[ "$(params.server)" == "stage-internal" ]]
        then
          export PYXIS_GRAPHQL_API="https://graphql.pyxis.stage.engineering.redhat.com/graphql/"
        else
          echo "Invalid server parameter. Only 'production','production-internal,'stage-internal' and 'stage' allowed."
          exit 1
        fi

        export PYXIS_CERT_PATH=/tmp/crt
        export PYXIS_KEY_PATH=/tmp/key
        echo "${pyxisCert}" > $PYXIS_CERT_PATH
        echo "${pyxisKey}" > $PYXIS_KEY_PATH

        PYXIS_FILE="$(workspaces.data.path)/$(params.pyxisJsonPath)"

        cd /workdir/sboms

        N=$(params.concurrentLimit)  # The maximum number of images to be processed at once
        declare -a jobs=()
        declare -a files=()
        total=$(ls *.json | wc -l )
        count=0
        success=true
        echo "Starting RPM Manifest upload for $total files in total. " \
          "Up to $N files will be uploaded at once..."

        for FILE in *.json; do
          IMAGEID=$(echo $FILE | cut -d '.' -f 1)
          echo Uploading RPM Manifest to Pyxis for IMAGE: $IMAGEID with SBOM: $FILE
          upload_rpm_manifest --retry --image-id $IMAGEID --sbom-path $FILE --verbose > ${IMAGEID}.out 2>&1 &

          jobs+=($!)  # Save the background process ID
          images+=($IMAGEID)
          ((++count))

          if [ $((count%N)) -eq 0 -o $((count)) -eq $total ]; then
            echo Waiting for the current batch of background processes to finish
            for job_id in "${!jobs[@]}"; do
              if ! wait ${jobs[job_id]}; then
                echo "Error: upload of rpm manifests failed for one of the images"
                success=false
              fi
            done

            echo
            echo Printing outputs for current upload_rpm_manifest script runs
            for img in ${images[@]}; do
              echo "=== $img ==="
              cat "${img}.out"
              echo
            done

            if [ $success != "true" ]; then
              echo ERROR: At least one upload in the last batch failed
              exit 1
            fi

            # Reset job and files arrays for the next batch
            jobs=()
            images=()
          fi
        done
