---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-file-updates
  labels:
    app.kubernetes.io/version: "0.4.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to run file updates
  params:
    - name: jsonKey
      type: string
      description: The json key containing the file updates
      default: ".spec.extraData.fileUpdates"
    - name: fileUpdatesPath
      type: string
      description: The path to the file containing the file updates
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the data workspace
      default: "snapshot_spec.json"
    - name: request
      type: string
      description: Name of the request
      default: "file-updates"
    - name: synchronously
      type: string
      description: Whether to run synchronously or not
      default: "true"
  workspaces:
    - name: data
      description: Workspace where the file updates to apply are defined
  steps:
    - name: run-script
      image: quay.io/hacbs-release/release-utils:6e92a6f8df8ef1cbecfb4c25b73ec6d92bded527
      script: |
        #!/bin/sh
        #
        #
        set -e

        # Obtain application from snapshot
        application=$(jq -rc .application $(workspaces.data.path)/$(params.snapshotPath))
        
        # Extract the key from the JSON file
        fileUpdates=$(jq -rc "$(params.jsonKey)" $(workspaces.data.path)/$(params.fileUpdatesPath))
  
        # Iterate over the extracted array and call the script
        fileUpdatesLength=$(jq '. | length' <<< "${fileUpdates}")
        for((i=0; i<fileUpdatesLength; i++)); do
          item=$(jq -cr ".[$i]" <<< "${fileUpdates}")

          repo=$(jq -cr '.repo' <<< "${item}")
          upstream_repo=$(jq -cr '.upstream_repo' <<< "${item}")
          ref=$(jq -cr '.ref // "main"' <<< "${item}")
          paths=$(jq -cr '.paths // "[]"' <<< "${item}")

          echo "=== Updates for repo: ${repo} ==="

          echo -en "  Evaluating '{{ }}' expressions..."
          updatedPaths=$(update-paths -p "${paths}" -f $(workspaces.data.path)/$(params.snapshotPath))
          echo "done"

          echo -en "  Creating InternalRequest to produce file-updates..."
          internal-request -r "$(params.request)" \
                           -p upstream_repo="${upstream_repo}" \
                           -p repo="${repo}" \
                           -p ref="${ref}" \
                           -p paths="${updatedPaths}" \
                           -p application=${application} \
                           -s "$(params.synchronously)" \
                           > $(workspaces.data.path)/ir-result.txt || \
                           (grep "^\[" $(workspaces.data.path)/ir-result.txt | jq . && exit 1)
          
          internalRequest=$(awk 'NR==1{ print $2 }' $(workspaces.data.path)/ir-result.txt | xargs)
          echo "done (${internalRequest})"

          results=$(kubectl get internalrequest $internalRequest -o=jsonpath='{.status.results}')
          if [ $(jq -jr '.buildState' <<< "${results}") == "Failed" ]; then
            echo -en "  FileUpdates Error: "
            jq -r '.jsonBuildInfo | fromjson | .error' <<< "${results}"
            echo -e "  Diff (content might be truncated): "
            jq -r '.jsonBuildInfo | fromjson | .str | tostring' <<< "${results}" | awk '{ print "\t"$0 }'
            echo -e "=== Finished ===\n"
            exit 1
          else
            echo -en "  MR Created: "
            jq -r '.jsonBuildInfo | fromjson | fromjson | .merge_request' <<< "${results}"
          fi
          echo -e "=== Finished ===\n"

        done
